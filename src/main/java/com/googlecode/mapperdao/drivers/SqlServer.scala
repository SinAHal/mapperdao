package com.googlecode.mapperdao.drivers

import com.googlecode.mapperdao.jdbc.Jdbc
import com.googlecode.mapperdao.TypeRegistry
import com.googlecode.mapperdao.ColumnBase
import com.googlecode.mapperdao.jdbc.UpdateResultWithGeneratedKeys
import com.googlecode.mapperdao.QueryDao
import com.googlecode.mapperdao.Query
import com.googlecode.mapperdao.QueryConfig
import com.googlecode.mapperdao.TypeManager
import com.googlecode.mapperdao.SimpleColumn
import com.googlecode.mapperdao.sqlbuilder.SqlBuilder

/**
 * mapperdao driver for Sql Server
 *
 * @author kostantinos.kougios
 *
 * 13 Nov 2011
 */
class SqlServer(val jdbc: Jdbc, val typeRegistry: TypeRegistry, val typeManager: TypeManager) extends Driver {

	val escapeNamesStrategy = new EscapeNamesStrategy {
		val invalidColumnNames = Set("end", "select", "where", "group", "user")
		val invalidTableNames = Set("end", "select", "where", "group", "user")

		override def escapeColumnNames(name: String) = if (invalidColumnNames.contains(name.toLowerCase)) '[' + name + ']'; else name
		override def escapeTableNames(name: String) = if (invalidTableNames.contains(name.toLowerCase)) '[' + name + ']'; else name
	}
	val sqlBuilder = new SqlBuilder(escapeNamesStrategy)

	protected[mapperdao] override def getAutoGenerated(ur: UpdateResultWithGeneratedKeys, column: SimpleColumn): Any =
		ur.keys.get("GENERATED_KEYS").get

	/**
	 * attempt to create queries like
	 * select * from
	 * (
	 * 		select
	 * 		ROW_NUMBER() over (order by companyName desc) as Row,
	 * 		customerId,companyName
	 * 		from Customers
	 * ) as t
	 * where Row between 3 and 5
	 */
	override def queryAfterSelect[PC, T](q: sqlBuilder.SqlSelectBuilder, queryConfig: QueryConfig, aliases: QueryDao.Aliases, qe: Query.Builder[PC, T], columns: List[SimpleColumn]) =
		if (queryConfig.hasRange) {
			val sb = new StringBuilder("ROW_NUMBER() over (order by ")
			val entity = qe.entity
			val alias = aliases(qe.entity)
			val orderBySql = qe.order.map(t => alias + "." + t._1.column.name + " " + t._2.sql).mkString(",")
			if (orderBySql.isEmpty) {
				sb append entity.tpe.table.primaryKeys.map(alias + "." + _.name).mkString(",")
			} else sb append orderBySql

			sb append ") as Row"
			val sql = sb.toString
			q.columnNames(null, List(sql))
		}

	override def beforeStartOfQuery[PC, T](q: sqlBuilder.SqlSelectBuilder, queryConfig: QueryConfig, qe: Query.Builder[PC, T], columns: List[SimpleColumn]) =
		if (queryConfig.hasRange) {
			val nq = new sqlBuilder.SqlSelectBuilder
			nq.columnNames(null, List("*"))
			nq.from(q, "t")
			nq
		} else q

	override def endOfQuery[PC, T](q: sqlBuilder.SqlSelectBuilder, queryConfig: QueryConfig, qe: Query.Builder[PC, T]) =
		if (queryConfig.hasRange) {
			val offset = queryConfig.offset.getOrElse(0l) + 1
			val w = sqlBuilder.Between(null, "Row", offset, (if (queryConfig.limit.isDefined) queryConfig.limit.get + offset - 1 else Long.MaxValue))
			q.where(w)
			q
		} else q

	override def shouldCreateOrderByClause(queryConfig: QueryConfig): Boolean = !queryConfig.hasRange

	override def toString = "SqlServer"
}