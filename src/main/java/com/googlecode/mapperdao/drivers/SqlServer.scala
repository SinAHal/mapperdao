package com.googlecode.mapperdao.drivers

import com.googlecode.mapperdao.jdbc.Jdbc
import com.googlecode.mapperdao.TypeRegistry
import com.googlecode.mapperdao.ColumnBase
import com.googlecode.mapperdao.jdbc.UpdateResultWithGeneratedKeys
import com.googlecode.mapperdao.QueryDao
import com.googlecode.mapperdao.Query
import oracle.net.aso.h
import com.googlecode.mapperdao.QueryConfig

/**
 * mapperdao driver for Sql Server
 *
 * @author kostantinos.kougios
 *
 * 13 Nov 2011
 */
class SqlServer(override val jdbc: Jdbc, override val typeRegistry: TypeRegistry) extends Driver {
	private val invalidColumnNames = Set("end", "select", "where", "group")
	private val invalidTableNames = Set("end", "select", "where", "group")

	override def escapeColumnNames(name: String) = if (invalidColumnNames.contains(name)) '[' + name + ']'; else name
	override def escapeTableNames(name: String): String = if (invalidTableNames.contains(name)) '[' + name + ']'; else name

	protected[mapperdao] override def getAutoGenerated(ur: UpdateResultWithGeneratedKeys, column: ColumnBase): Any =
		ur.keys.get("GENERATED_KEYS").get

	/**
	 * attempt to create queries like
	 * select * from
	 * (
	 * 		select
	 * 		ROW_NUMBER() over (order by companyName desc) as Row,
	 * 		customerId,companyName
	 * 		from Customers
	 * ) as t
	 * where Row between 3 and 5
	 */
	override def queryAfterSelect[PC, T](queryConfig: QueryConfig, aliases: QueryDao.Aliases, qe: Query.QueryEntity[PC, T], columns: List[ColumnBase]): String = {
		if (queryConfig.hasRange) {
			val sb = new StringBuilder("ROW_NUMBER() over (order by ")
			val orderBySql = qe.order.map(t => t._1.column.columnName + " " + t._2.sql).mkString(",")
			if (orderBySql.isEmpty) {
				sb append qe.entity.tpe.table.primaryKeysAsCommaSeparatedList
			} else sb append orderBySql

			sb append ") as Row"
			sb.toString
		} else ""
	}

	override def beforeStartOfQuery[PC, T](queryConfig: QueryConfig, qe: Query.QueryEntity[PC, T], columns: List[ColumnBase], sql: StringBuilder): Unit =
		if (queryConfig.hasRange) {
			sql append "select * from (\n"
		}

	override def endOfQuery[PC, T](queryConfig: QueryConfig, qe: Query.QueryEntity[PC, T], sql: StringBuilder): Unit =
		if (queryConfig.hasRange) {
			val offset = queryConfig.offset.getOrElse(0l)
			sql append "\n) where Row between " append offset append " and "
			sql append (if (queryConfig.limit.isDefined) queryConfig.limit.get + offset else Long.MaxValue)
		}
	override def toString = "SqlServer"
}