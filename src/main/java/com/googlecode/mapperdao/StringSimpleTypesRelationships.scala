package com.googlecode.mapperdao

/**
 * string simple type
 */
case class StringValue(val value: String) extends SimpleTypeValue[String, StringValue] {
	def compareTo(o: StringValue): Int = value.compareTo(o.value)
}

protected class StringEntityOneToMany(table: String, fkColumn: String, soleColumn: String) extends SimpleEntity[StringValue](table, classOf[StringValue]) {
	val value = column(soleColumn) to (_.value)
	declarePrimaryKeys(fkColumn, soleColumn)
	def constructor(implicit m: ValuesMap) = new StringValue(value) with Persisted
}

abstract class StringEntityManyToManyBase[PC](table: String, soleColumn: String) extends Entity[PC, StringValue](table, classOf[StringValue]) {
	val value = column(soleColumn) to (_.value)
}
class StringEntityManyToManyAutoGenerated(table: String, pkColumn: String, soleColumn: String, sequence: Option[String] = None) extends StringEntityManyToManyBase[IntId](table, soleColumn) {
	val id = key(pkColumn) sequence (sequence) autogenerated (_.id)
	def constructor(implicit m: ValuesMap) = new StringValue(value) with Persisted with IntId {
		val id: Int = StringEntityManyToManyAutoGenerated.this.id
	}
}

object StringEntity {
	def oneToMany(table: String, fkColumn: String, soleColumn: String) = new StringEntityOneToMany(table, fkColumn, soleColumn)
	def manyToManyAutoGeneratedPK(table: String, pkColumn: String, soleColumn: String, sequence: Option[String] = None) = new StringEntityManyToManyAutoGenerated(table, pkColumn, soleColumn, sequence)
}
