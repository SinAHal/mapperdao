package com.rits.orm
import scala.collection.mutable.Buffer
import java.util.Calendar
import org.joda.time.DateTime
import com.rits.orm.utils.ISet

/**
 * @author kostantinos.kougios
 *
 * 16 Jul 2011
 */
class ValuesMap(typeManager: TypeManager, protected[orm] var m: Map[String, Any]) {
	protected[orm] def apply[T](column: String): T = typeManager.deepClone(m.getOrElse(column, null).asInstanceOf[T])

	def apply[T, V](column: ColumnInfo[T, V]): V =
		{
			val key = column.column.columnName
			apply[V](key)
		}
	def apply[T, F](column: ColumnInfoOneToOne[T, F]): F =
		{
			val key = column.column.columnName
			apply[F](key)
		}
	def apply[T, F](column: ColumnInfoOneToOneReverse[T, F]): F =
		{
			val key = column.column.columnName
			apply[F](key)
		}

	def apply[T, V](column: ColumnInfoTraversableOneToMany[T, V]): Traversable[V] =
		{
			val key = column.column.alias
			apply[Traversable[V]](key)
		}
	def apply[T, V](column: ColumnInfoTraversableManyToMany[T, V]): Traversable[V] =
		{
			val key = column.column.alias
			apply[Traversable[V]](key)
		}
	def apply[T, F](column: ColumnInfoManyToOne[T, F]) =
		{
			val key = column.column.alias
			apply[F](key)
		}

	def float[T, V](column: ColumnInfo[T, V]): Float =
		{
			val v = apply(column)
			v match {
				case f: Float => f
				case b: java.math.BigDecimal => b.floatValue
				case b: java.math.BigInteger => b.floatValue
			}
		}

	def double[T, V](column: ColumnInfo[T, V]): Double =
		{
			val v = apply(column)
			v match {
				case d: Double => d
				case b: java.math.BigDecimal => b.doubleValue
				case b: java.math.BigInteger => b.doubleValue
			}
		}
	def boolean[T, V](column: ColumnInfo[T, V]): Boolean =
		{
			val v = apply(column)
			v match {
				case b: Boolean => b
				case i: Int => i == 1
			}
		}

	def iset[T, V](column: ColumnInfoTraversableOneToMany[T, V]): ISet[V] =
		{
			val key = column.column.alias
			val t = apply[Traversable[V]](key)
			new ISet(this, column.column.columnName)
		}
	def iset[T, V](column: ColumnInfoTraversableManyToMany[T, V]): ISet[V] =
		{
			val key = column.column.alias
			val t = apply[Traversable[V]](key)
			new ISet(this, key)
		}

	/**
	 * the following methods do a conversion
	 */
	//	def traversable[T](column: String): Traversable[T] = apply(column).asInstanceOf[Traversable[T]]
	//	def list[T](column: String): List[T] = apply(column).asInstanceOf[Traversable[T]].toList
	protected[orm] def set[T](column: String): Set[T] = apply(column).asInstanceOf[Traversable[T]].toSet
	//	def iset[T](column: String): Set[T] = new ISet(this, column)
	protected[orm] def seq[T](column: String): Seq[T] = apply(column).asInstanceOf[Traversable[T]].toSeq
	//	def indexedSeq[T](column: String): Seq[T] = apply(column).asInstanceOf[Traversable[T]].toIndexedSeq
	//	def buffer[T](column: String): Buffer[T] = apply(column).asInstanceOf[Traversable[T]].toBuffer

	override def toString = m.toString

	protected[orm] def toMutableMap: scala.collection.mutable.Map[String, Any] = new scala.collection.mutable.HashMap() ++ m

	protected[orm] def toListOfColumnAndValueTuple(columns: List[ColumnBase]) = columns.map(c => (c, m(c.alias)))
	protected[orm] def toListOfColumnValue(columns: List[ColumnBase]) = columns.map(c => m(c.alias))
}

object ValuesMap {
	protected[orm] def fromEntity[PC, T](typeManager: TypeManager, tpe: Type[PC, T], o: T): ValuesMap =
		{
			val m = tpe.table.toColumnAliasAndValueMap(tpe.table.columnsWithoutAutoGenerated, o).map(e => (e._1, typeManager.deepClone(e._2)))
			new ValuesMap(typeManager, m)
		}
	protected[orm] def fromMutableMap(typeManager: TypeManager, m: scala.collection.mutable.Map[String, Any]): ValuesMap =
		{
			new ValuesMap(typeManager, Map() ++ m)
		}
}