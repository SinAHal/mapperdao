package com.googlecode.mapperdao.state.persistcmds

import com.googlecode.mapperdao._
import java.util.IdentityHashMap

/**
 * entities are converted to PersistOps
 *
 * @author kostantinos.kougios
 *
 * 21 Nov 2012
 */
class PersistCmdFactory {

	private var alreadyProcessed = Map[Int, PersistCmd[_, _]]()

	def toInsertCmd[ID, T](
		entity: Entity[ID, _ <: DeclaredIds[ID], T],
		newVM: ValuesMap) = insert(entity.asInstanceOf[Entity[ID, DeclaredIds[ID], T]], newVM)
	def toUpdateCmd[ID, T](
		entity: Entity[ID, _ <: DeclaredIds[ID], T],
		oldValuesMap: ValuesMap,
		newValuesMap: ValuesMap) = update(entity.asInstanceOf[Entity[ID, DeclaredIds[ID], T]], oldValuesMap, newValuesMap)

	private def insert[ID, T](
		entity: Entity[ID, DeclaredIds[ID], T],
		newVM: ValuesMap) = {
		alreadyProcessed.get(newVM.identity) match {
			case None =>
				val tpe = entity.tpe
				val table = tpe.table
				val columnAndValues = newVM.toListOfSimpleColumnAndValueTuple(table.simpleTypeNotAutoGeneratedColumns)
				val op = InsertCmd(entity, newVM, columnAndValues, Nil)
				alreadyProcessed += (newVM.identity -> op)
				op
			case Some(x) =>
				AlreadyProcessedCmd(entity)
		}
	}

	private def update[ID, T](
		entity: Entity[ID, DeclaredIds[ID], T],
		oldValuesMap: ValuesMap,
		newValuesMap: ValuesMap) = {
		val op = alreadyProcessed.get(newValuesMap.identity)
		if (op.isDefined) {
			AlreadyProcessedCmd(entity)
		} else {
			val tpe = entity.tpe
			val table = tpe.table
			val columnAndValues = newValuesMap.toListOfColumnAndValueTuple(table.simpleTypeNotAutoGeneratedColumns)
			val op = UpdateCmd(entity, oldValuesMap, newValuesMap, columnAndValues, Nil)
			alreadyProcessed += (newValuesMap.identity -> op)
			op
		}
	}
}