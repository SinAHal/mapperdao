package com.googlecode.mapperdao

/**
 * double simple type
 */
case class DoubleValue(val value: Double) extends SimpleTypeValue[Double, DoubleValue] {
	def compareTo(o: DoubleValue): Int = value.compare(o.value)
}

protected class DoubleEntityOTM(table: String, fkColumn: String, soleColumn: String)
		extends Entity[NoId, DoubleValue](table, classOf[DoubleValue]) {
	val value = column(soleColumn) to (_.value)
	//declarePrimaryKey(fkColumn) { _ => None }
	declarePrimaryKey(value)

	def constructor(implicit m: ValuesMap) = new DoubleValue(value) with NoId
}

abstract class DoubleEntityManyToManyBase[PC](table: String, soleColumn: String) extends Entity[PC, DoubleValue](table, classOf[DoubleValue]) {
	val value = column(soleColumn) to (_.value)
}
class DoubleEntityManyToManyAutoGenerated(table: String, pkColumn: String, soleColumn: String, sequence: Option[String] = None) extends DoubleEntityManyToManyBase[IntId](table, soleColumn) {
	val id = key(pkColumn) sequence (sequence) autogenerated (_.id)
	def constructor(implicit m: ValuesMap) = new DoubleValue(value) with Persisted with IntId {
		val id: Int = DoubleEntityManyToManyAutoGenerated.this.id
	}
}

object DoubleEntity {
	def oneToMany(table: String, fkColumn: String, soleColumn: String) = new DoubleEntityOTM(table, fkColumn, soleColumn)
	def manyToManyAutoGeneratedPK(table: String, pkColumn: String, soleColumn: String, sequence: Option[String] = None) = new DoubleEntityManyToManyAutoGenerated(table, pkColumn, soleColumn, sequence)
}
