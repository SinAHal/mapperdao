package com.googlecode.mapperdao.jdbc

import com.googlecode.mapperdao._
import com.googlecode.mapperdao.ops._
import com.googlecode.mapperdao.drivers.Driver
import org.springframework.jdbc.core.SqlParameterValue

/**
 * converts commands to database operations, executes
 * them and returns the resulting entity
 *
 * @author kostantinos.kougios
 *
 * 22 Nov 2012
 */
class CmdToDatabase(driver: Driver) {
	private val jdbc = driver.jdbc

	private case class Node[ID, PC <: DeclaredIds[ID], T](
		sql: String,
		values: List[SqlParameterValue],
		entity: Entity[ID, PC, T],
		o: T,
		children: List[(ColumnInfoRelationshipBase[_, _, _, _, _], Node[_, _, _])],
		var keys: List[(SimpleColumn, Any)],
		var newO: Option[T with PC])

	def insert[ID, PC <: DeclaredIds[ID], T](
		cmds: List[PersistCmd[ID, PC, T]]): List[T with PC] = {
		// collect the sql and values
		val sqlCmds = cmds.map { cmd =>
			val sql = toSql(cmd)
			Node(sql.sql, sql.values, cmd.entity, cmd.o, Nil, Nil, None)
		}

		// run the batch updates
		val batchResults = sqlCmds.groupBy(_.sql).map {
			case (sql, nodes) =>
				val entity = nodes.head.entity
				val table = entity.tpe.table
				val autoGeneratedColumnNames = table.autoGeneratedColumnNamesArray
				val bo = BatchOptions(driver.batchStrategy, autoGeneratedColumnNames)
				val args = nodes.map {
					case Node(_, values, _, _, _, _, _) =>
						values.toArray
				}.toArray
				val br = jdbc.batchUpdate(bo, sql, args)
				val keys = br.keys map { m =>
					table.autoGeneratedColumns.map { column =>
						(column, driver.getAutoGenerated(m, column))
					}
				}

				(
					entity,
					br.keys zip cmds.map(_._2.o)
				)
		}

		// reconstruct the persisted entities
		batchResults.map {
			case (entity, a) =>

			//				ValuesMap.fromMap(m)
		}
		Nil
	}

	private def toSql(cmd: PersistCmd[_, _, _]) = cmd match {
		case InsertCmd(entity, o, columns) =>
			driver.insertSql(entity.tpe, columns).result
	}
}