package com.googlecode.mapperdao.jdbc

import com.googlecode.mapperdao._
import com.googlecode.mapperdao.state.persistcmds._
import com.googlecode.mapperdao.drivers.Driver
import org.springframework.jdbc.core.SqlParameterValue
import com.googlecode.mapperdao.state.persisted._
import com.googlecode.mapperdao.state.persistcmds.PersistCmd
import com.googlecode.mapperdao.state.persistcmds.InsertCmd

/**
 * converts commands to database operations, executes
 * them and returns the resulting persisted nodes.
 *
 * @author kostantinos.kougios
 *
 * 22 Nov 2012
 */
class CmdToDatabase(
		updateConfig: UpdateConfig,
		driver: Driver,
		typeManager: TypeManager) {

	private val jdbc = driver.jdbc

	private case class Node(sql: driver.sqlBuilder.Result, cmd: PersistCmd[_, DeclaredIds[_], _], parentCmd: Option[PersistCmd[_, DeclaredIds[_], _]])

	private case class CmdKey(cmd: PersistCmd[_, _ <: DeclaredIds[_], _], parentCmd: Option[PersistCmd[_, _ <: DeclaredIds[_], _]], keys: List[(SimpleColumn, Any)])

	def insert[ID, PC <: DeclaredIds[ID], T](
		cmds: List[PersistCmd[ID, PC, T]]): List[PersistedNode[ID, PC, T]] = {

		// we need to flatten out the sql's so that we can batch process them
		// but also keep the tree structure so that we return only PersistedNode's
		// for the top level PersistedCmd's

		// flatten out the sqls
		val sqls = cmds.map { cmd =>

			def convert(cmd: PersistCmd[_, DeclaredIds[_], _], parentCmd: Option[PersistCmd[_, DeclaredIds[_], _]]): List[Node] = {
				val sql = toSql(cmd)
				Node(sql, cmd, parentCmd) :: (cmd.commands.map { c =>
					convert(c, Some(cmd))
				}.flatten)
			}

			convert(cmd.asInstanceOf[PersistCmd[_, DeclaredIds[_], _]], None)
		}.flatten

		// group the sql's and batch-execute them
		val cmdKeys = sqls.groupBy {
			_.sql.sql
		}.map {
			case (sql, nodes) =>
				val entity = nodes.head.cmd.entity
				val table = entity.tpe.table
				val autoGeneratedColumnNames = table.autoGeneratedColumnNamesArray
				val bo = BatchOptions(driver.batchStrategy, autoGeneratedColumnNames)
				val args = nodes.map {
					case Node(sql, _, _) =>
						sql.values.toArray
				}.toArray

				// do the batch update
				val br = jdbc.batchUpdate(bo, sql, args)

				// now extract the keys and set them into the nodes
				val keys = br.keys map { m =>
					table.autoGeneratedColumns.map { column =>
						(column, driver.getAutoGenerated(m, column))
					}
				}
				(nodes zip keys) map {
					case (Node(_, cmd, parentCmd), key) =>
						CmdKey(cmd, parentCmd, key.toList)
				}
		}.flatten

		Nil
	}
	private def toSql(cmd: PersistCmd[_, _, _]) = cmd match {
		case InsertCmd(entity, o, columns, commands) =>
			driver.insertSql(entity.tpe, columns).result
	}
}