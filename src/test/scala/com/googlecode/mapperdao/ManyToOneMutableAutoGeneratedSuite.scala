package com.googlecode.mapperdao

import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{FunSuite, Matchers}

/**
 * @author kostantinos.kougios
 *
 *         6 Sep 2011
 */
@RunWith(classOf[JUnitRunner])
class ManyToOneMutableAutoGeneratedSuite extends FunSuite with Matchers
{
	val (jdbc, mapperDao: MapperDao, queryDao) = Setup.setupMapperDao(List(PersonEntity, CompanyEntity, HouseEntity))

	test("batch update") {
		createTables()

		val List(c1, c2) = mapperDao.insertBatch(CompanyEntity, List(Company("C1"), Company("C2")))
		val h1 = House("H1")
		val h2 = House("H2")
		val p1 = Person("P1", c1, h1)
		val p2 = Person("P2", c2, h2)

		val List(i1, i2) = mapperDao.insertBatch(PersonEntity, List(p1, p2))

		i1.lives = h2
		i1.company = c2
		i2.lives = h1
		i2.company = c1
		val List(u1, u2) = mapperDao.updateBatchMutable(PersonEntity, List(i1, i2))
		u1 should be(i1)
		u2 should be(i2)

		mapperDao.select(PersonEntity, u1.id).get should be(u1)
		mapperDao.select(PersonEntity, u2.id).get should be(u2)
	}

	test("update to null both FK") {
		createTables()

		val company1 = mapperDao.insert(CompanyEntity, Company("Coders limited"))
		val house = House("Rhodes,Greece")
		val person = Person("Kostas", company1, house)

		val inserted = mapperDao.insert(PersonEntity, person)
		inserted should be(person)

		inserted.name = "changed"
		inserted.company = null
		inserted.lives = null
		val updated = mapperDao.update(PersonEntity, inserted)
		updated should be(inserted)

		val selected = mapperDao.select(PersonEntity, inserted.id).get
		selected should be(updated)

		mapperDao.delete(PersonEntity, selected)
		mapperDao.select(PersonEntity, selected.id) should be(None)
	}

	test("update to null") {
		createTables()

		val company1 = mapperDao.insert(CompanyEntity, Company("Coders limited"))
		val house = House("Rhodes,Greece")
		val person = Person("Kostas", company1, house)

		val inserted = mapperDao.insert(PersonEntity, person)
		inserted should be(person)

		inserted.name = "changed"
		inserted.company = null

		val updated = mapperDao.update(PersonEntity, inserted)
		updated should be(inserted)

		val selected = mapperDao.select(PersonEntity, updated.id).get
		selected should be(updated)

		mapperDao.delete(PersonEntity, selected)
		mapperDao.select(PersonEntity, selected.id) should be(None)
	}

	test("update") {
		createTables()

		val company1 = mapperDao.insert(CompanyEntity, Company("Coders limited"))
		val company2 = mapperDao.insert(CompanyEntity, Company("Scala Inc"))
		val house = House("Rhodes,Greece")
		val person = Person("Kostas", company1, house)

		val inserted = mapperDao.insert(PersonEntity, person)
		inserted should be(person)
		inserted.company = company2
		val updated = mapperDao.update(PersonEntity, inserted)
		updated should be(inserted)

		val selected = mapperDao.select(PersonEntity, updated.id).get
		selected should be(updated)

		mapperDao.delete(PersonEntity, selected)
		mapperDao.select(PersonEntity, selected.id) should be(None)
	}

	def createTables() {
		Setup.dropAllTables(jdbc)
		Setup.queries(this, jdbc).update("ddl")
		Setup.database match {
			case "oracle" =>
				Setup.createSeq(jdbc, "CompanySeq")
				Setup.createSeq(jdbc, "HouseSeq")
				Setup.createSeq(jdbc, "PersonSeq")
			case _ =>
		}
	}

	case class Person(var name: String, var company: Company, var lives: House)

	case class Company(var name: String)

	case class House(var address: String)

	object PersonEntity extends Entity[Int, SurrogateIntId, Person]
	{
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("PersonSeq")
			case _ => None
		}) autogenerated (_.id)
		val name = column("name") to (_.name)
		val company = manytoone(CompanyEntity) to (_.company)
		val lives = manytoone(HouseEntity) to (_.lives)

		def constructor(implicit m: ValuesMap) = new Person(name, company, lives) with Stored
		{
			val id: Int = PersonEntity.id
		}
	}

	object CompanyEntity extends Entity[Int, SurrogateIntId, Company]
	{
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("CompanySeq")
			case _ => None
		}) autogenerated (_.id)
		val name = column("name") to (_.name)

		def constructor(implicit m: ValuesMap) = new Company(name) with Stored
		{
			val id: Int = CompanyEntity.id
		}
	}

	object HouseEntity extends Entity[Int, SurrogateIntId, House]
	{
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("HouseSeq")
			case _ => None
		}) autogenerated (_.id)
		val address = column("address") to (_.address)

		def constructor(implicit m: ValuesMap) = new House(address) with Stored
		{
			val id: Int = HouseEntity.id
		}
	}

}