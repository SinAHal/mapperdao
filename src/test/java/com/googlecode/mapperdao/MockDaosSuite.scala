package com.googlecode.mapperdao

import utils.TransactionalIntIdCRUD
import com.googlecode.mapperdao.utils.MockTransactionalIntIdCRUD
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers

/**
 * @author kostantinos.kougios
 *
 * 12 Oct 2011
 */
@RunWith(classOf[JUnitRunner])
class MockDaosSuite extends FunSuite with ShouldMatchers {
	case class JobPosition(var name: String)
	object JobPositionEntity extends Entity[IntId, JobPosition] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		def constructor(implicit m) = new JobPosition(name) with IntId with Persisted {
			val id: Int = JobPositionEntity.id
		}
	}

	val typeRegistry = TypeRegistry(JobPositionEntity)

	abstract class ActualDao extends TransactionalIntIdCRUD[JobPosition] {
	}

	object TestDao extends ActualDao with MockTransactionalIntIdCRUD[JobPosition] {
		val entity = JobPositionEntity
		val mapperDao = MemoryMapperDao(typeRegistry)
	}

	test("mock dao create") {
		val created = TestDao.create(JobPosition("x"))
		created should be === JobPosition("x")
		TestDao.retrieve(created.id).get should be === JobPosition("x")
	}

	test("mock dao update") {
		val created = TestDao.create(JobPosition("x"))
		val updated = TestDao.update(created, JobPosition("y"))
		updated should be === JobPosition("y")
		TestDao.retrieve(updated.id).get should be === JobPosition("y")
	}

	test("mock dao delete") {
		val created = TestDao.create(JobPosition("x"))
		val deleted = TestDao.delete(created)
		deleted should be === JobPosition("x")
		TestDao.retrieve(created.id) should be(None)
	}
}