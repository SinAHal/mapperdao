package com.googlecode.mapperdao

import org.specs2.mutable.SpecificationWithJUnit
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 6 Aug 2011
 */
class ManyToManyAutoGeneratedSpec extends SpecificationWithJUnit {

	import ManyToManyAutoGeneratedSpec._

	val (jdbc, mapperDao) = Setup.setupMapperDao(TypeRegistry(ProductEntity, AttributeEntity))

	"randomize id's, update and select" in {
		createTables
		val l = for (i <- 1 to 5) yield {
			val product = Product("blue jean" + i, Set(Attribute("colour" + i, "blue" + i, Set()), Attribute("size" + i * 2, "medium" + i * 2, Set())))
			val inserted = mapperDao.insert(ProductEntity, product)
			inserted
		}
		val updated = mapperDao.update(ProductEntity, l.last, Product("blue jeanX", l.last.attributes.filterNot(_.name == "colour")))
		mapperDao.select(ProductEntity, l.last.id).get must_== updated
		mapperDao.select(ProductEntity, l.head.id).get must_== l.head
	}

	"update leaf entity relationship" in {
		createTables
		val a1 = mapperDao.insert(AttributeEntity, Attribute("colour", "blue", Set()))
		val a2 = mapperDao.insert(AttributeEntity, Attribute("size", "medium", Set()))
		val product = Product("blue jean", Set(a1, a2))
		val inserted = mapperDao.insert(ProductEntity, product)

		val sa1 = mapperDao.select(AttributeEntity, a1.id).get
		val ua1 = mapperDao.update(AttributeEntity, sa1, Attribute("colour", "blue", Set()))
		mapperDao.select(ProductEntity, inserted.id).get must_== Product("blue jean", Set(a2))
		mapperDao.select(AttributeEntity, ua1.id).get must_== Attribute("colour", "blue", Set())

		val ua2 = mapperDao.update(AttributeEntity, ua1, Attribute("colour", "blue", Set(inserted)))
		mapperDao.select(ProductEntity, inserted.id).get must_== Product("blue jean", Set(ua2, a2))
		mapperDao.select(AttributeEntity, ua2.id).get must_== Attribute("colour", "blue", Set(inserted))
	}

	"update leaf entity values" in {
		createTables
		val a1 = mapperDao.insert(AttributeEntity, Attribute("colour", "blue", Set()))
		val a2 = mapperDao.insert(AttributeEntity, Attribute("size", "medium", Set()))
		val product = Product("blue jean", Set(a1, a2))
		val inserted = mapperDao.insert(ProductEntity, product)

		val sa1 = mapperDao.select(AttributeEntity, a1.id).get
		val ua1 = mapperDao.update(AttributeEntity, sa1, Attribute("colour", "red", sa1.products))
		mapperDao.select(ProductEntity, inserted.id).get must_== Product("blue jean", Set(ua1, a2))
		mapperDao.select(AttributeEntity, ua1.id).get must_== Attribute("colour", "red", sa1.products)
	}

	"randomize id's and select" in {
		createTables
		val l = for (i <- 1 to 5) yield {
			val product = Product("blue jean" + i, Set(Attribute("colour" + i, "blue" + i, Set()), Attribute("size" + i * 2, "medium" + i * 2, Set())))
			mapperDao.insert(ProductEntity, product)
		}
		mapperDao.select(ProductEntity, l.last.id).get must_== l.last
		mapperDao.select(ProductEntity, l.head.id).get must_== l.head
	}

	"insert tree of entities with cyclic references" in {
		createTables
		val product = Product("blue jean", Set(Attribute("colour", "blue", Set()), Attribute("size", "medium", Set())))
		val inserted = mapperDao.insert(ProductEntity, product)
		test(product, inserted)

		// due to cyclic reference, the attributes set contains "mock" products.
		val selected = mapperDao.select(ProductEntity, inserted.id).get
		test(inserted, selected)

		// attributes->product should also work
		val colour = inserted.attributes.toList.filter(_.name == "colour").head
		val loadedAttribute = mapperDao.select(AttributeEntity, mapperDao.intIdOf(colour)).get

		loadedAttribute must_== colour
		loadedAttribute.products must_== Set(Product("blue jean", Set()))

		mapperDao.delete(ProductEntity, inserted)
		mapperDao.select(ProductEntity, inserted.id) must beNone
	}

	"insert tree of entities (cyclic references) with persisted leaf entities" in {
		createTables
		val a1 = mapperDao.insert(AttributeEntity, Attribute("colour", "blue", Set()))
		val a2 = mapperDao.insert(AttributeEntity, Attribute("size", "medium", Set()))
		val product = Product("blue jean", Set(a1, a2))
		val inserted = mapperDao.insert(ProductEntity, product)
		test(product, inserted)

		// due to cyclic reference, the attributes collection contains "mock" products
		val selected = mapperDao.select(ProductEntity, inserted.id).get
		test(inserted, selected)

		mapperDao.delete(ProductEntity, inserted)
		mapperDao.select(ProductEntity, inserted.id) must beNone
	}

	"update tree of entities, remove entity from set" in {
		createTables
		val product = Product("blue jean", Set(Attribute("colour", "blue", Set()), Attribute("size", "medium", Set()), Attribute("size", "large", Set())))
		val inserted = mapperDao.insert(ProductEntity, product)

		val changed = Product("just jean", inserted.attributes.filterNot(_.name == "size"));
		val updated = mapperDao.update(ProductEntity, inserted, changed)
		test(changed, updated)

		val selected = mapperDao.select(ProductEntity, updated.id).get
		test(updated, selected)

		mapperDao.delete(ProductEntity, updated)
		mapperDao.select(ProductEntity, updated.id) must beNone
	}

	"update tree of entities, add new entities to set" in {
		createTables
		val product = Product("blue jean", Set(Attribute("colour", "blue", Set())))
		val inserted = mapperDao.insert(ProductEntity, product)

		val changed = Product("just jean", inserted.attributes + Attribute("size", "medium", Set()) + Attribute("size", "large", Set()));
		val updated = mapperDao.update(ProductEntity, inserted, changed)
		test(changed, updated)

		val selected = mapperDao.select(ProductEntity, updated.id).get
		test(updated, selected)

		mapperDao.delete(ProductEntity, updated)
		mapperDao.select(ProductEntity, updated.id) must beNone
	}

	"update tree of entities, add persisted entity to set" in {
		createTables
		val product = Product("blue jean", Set(Attribute("colour", "blue", Set())))
		val inserted = mapperDao.insert(ProductEntity, product)

		val persistedA = mapperDao.insert(AttributeEntity, Attribute("size", "medium", Set()))

		val changed = Product("just jean", inserted.attributes + persistedA + Attribute("size", "large", Set()));
		val updated = mapperDao.update(ProductEntity, inserted, changed)
		test(changed, updated)

		val selected = mapperDao.select(ProductEntity, mapperDao.intIdOf(updated)).get
		test(updated, selected)

		mapperDao.delete(ProductEntity, updated)
		mapperDao.select(ProductEntity, updated.id) must beNone
	}

	"update tree of entities, add updated entity to set" in {
		createTables
		val product = Product("blue jean", Set(Attribute("colour", "blue", Set())))
		val inserted = mapperDao.insert(ProductEntity, product)

		val persistedA = mapperDao.insert(AttributeEntity, Attribute("size", "medium", Set()))
		val updateOfPersistedA = mapperDao.update(AttributeEntity, persistedA, Attribute("size", "mediumX", Set()))

		val changed = Product("just jean", inserted.attributes + updateOfPersistedA + Attribute("size", "large", Set()));
		val updated = mapperDao.update(ProductEntity, inserted, changed)
		test(changed, updated)
		updated.attributes.contains(Attribute("size", "mediumX", Set())) must beTrue

		val selected = mapperDao.select(ProductEntity, mapperDao.intIdOf(updated)).get
		test(updated, selected)

		mapperDao.delete(ProductEntity, updated)
		mapperDao.select(ProductEntity, updated.id) must beNone
	}

	"combination of ops" in {
		createTables
		val p1 = Product("t-shirt", Set())
		val p2 = Product("a dress", Set(Attribute("size", "12", Set())))
		val a1 = Attribute("colour", "blue", Set())
		val a2 = Attribute("colour", "red", Set(p1, p2))
		val product = Product("blue jean", Set(a1, a2))
		val inserted = mapperDao.insert(ProductEntity, product)
		test(product, inserted)
		test(p1, inserted.attributes.find(_.value == "red").get.products.find(_ == p1).get)
		test(p2, inserted.attributes.find(_.value == "red").get.products.find(_ == p2).get)

		test(inserted, mapperDao.select(ProductEntity, inserted.id).get)
		//a2 was associated not only with p1,p2 but also with product 
		test(Attribute("colour", "red", Set(p1, p2, product)), mapperDao.select(AttributeEntity, mapperDao.intIdOf(inserted.attributes.find(_.value == "red").get)).get)

		mapperDao.delete(ProductEntity, inserted)
		mapperDao.select(ProductEntity, inserted.id) must beNone
	}

	def test(expected: Product, actual: Product) =
		{
			actual.attributes must_== expected.attributes
			actual must_== expected
		}

	def test(expected: Attribute, actual: Attribute) =
		{
			actual.products must_== expected.products
			actual must_== expected
		}

	def createTables =
		{
			Setup.dropAllTables(jdbc)
			jdbc.update("""
					create table Product (
						id serial not null,
						name varchar(100) not null,
						primary key(id)
					)
			""")
			jdbc.update("""
					create table Attribute (
						id serial not null,
						name varchar(100) not null,
						value varchar(100) not null,
						primary key(id)
					)
			""")
			jdbc.update("""
					create table Product_Attribute (
						product_id int not null,
						attribute_id int not null,
						primary key(product_id,attribute_id),
						foreign key(product_id) references Product(id) on delete cascade,
						foreign key(attribute_id) references Attribute(id) on delete cascade
					)
			""")
		}
}

object ManyToManyAutoGeneratedSpec {
	case class Product(val name: String, val attributes: Set[Attribute]) {
		override def equals(o: Any): Boolean = o match {
			case p: Product => name == p.name
			case _ => false
		}

		override def toString: String = "Product(%s)".format(name)
	}
	case class Attribute(val name: String, val value: String, val products: Set[Product]) {
		/**
		 * since there are cyclic references, we override equals
		 * to avoid StackOverflowError
		 */
		override def equals(o: Any): Boolean = o match {
			case a: Attribute => a.name == name && a.value == value
			case _ => false
		}

		override def toString: String = "Attribute(%s,%s)".format(name, value)
	}

	object ProductEntity extends Entity[IntId, Product](classOf[Product]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		val attributes = manyToMany(classOf[Attribute], _.attributes)

		val constructor = (m: ValuesMap) => new Product(m(name), m(attributes).toSet) with IntId with Persisted {
			val valuesMap = m
			val id = m(ProductEntity.id)
		}
	}

	object AttributeEntity extends Entity[IntId, Attribute](classOf[Attribute]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		val value = string("value", _.value);
		val products = manyToManyReverse(classOf[Product], _.products)

		val constructor = (m: ValuesMap) => new Attribute(m(name), m(value), m(products).toSet) with Persisted with IntId {
			val valuesMap = m
			val id = m(AttributeEntity.id)
		}
	}
}