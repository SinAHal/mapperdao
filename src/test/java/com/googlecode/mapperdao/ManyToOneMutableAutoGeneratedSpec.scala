package com.googlecode.mapperdao

import org.specs2.mutable.SpecificationWithJUnit
import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.specs2.runner.JUnitRunner

/**
 * @author kostantinos.kougios
 *
 * 6 Sep 2011
 */
@RunWith(classOf[JUnitRunner])
class ManyToOneMutableAutoGeneratedSpec extends SpecificationWithJUnit {
	import ManyToOneMutableAutoGeneratedSpec._
	val (jdbc, driver, mapperDao) = Setup.setupMapperDao(TypeRegistry(PersonEntity, CompanyEntity, HouseEntity))

	import mapperDao._

	"update to null both FK" in {
		createTables

		val company1 = insert(CompanyEntity, Company("Coders limited"))
		val house = House("Rhodes,Greece")
		val person = Person("Kostas", company1, house)

		val inserted = insert(PersonEntity, person)
		inserted must_== person

		inserted.name = "changed"
		inserted.company = null
		inserted.lives = null
		val updated = update(PersonEntity, inserted)
		updated must_== inserted

		val selected = select(PersonEntity, inserted.id).get
		selected must_== updated

		mapperDao.delete(PersonEntity, selected)
		mapperDao.select(PersonEntity, selected.id) must beNone
	}

	"update to null" in {
		createTables

		val company1 = insert(CompanyEntity, Company("Coders limited"))
		val house = House("Rhodes,Greece")
		val person = Person("Kostas", company1, house)

		val inserted = insert(PersonEntity, person)
		inserted must_== person

		inserted.name = "changed"
		inserted.company = null

		val updated = update(PersonEntity, inserted)
		updated must_== inserted

		val selected = select(PersonEntity, updated.id).get
		selected must_== updated

		mapperDao.delete(PersonEntity, selected)
		mapperDao.select(PersonEntity, selected.id) must beNone
	}

	"update" in {
		createTables

		import mapperDao._
		val company1 = insert(CompanyEntity, Company("Coders limited"))
		val company2 = insert(CompanyEntity, Company("Scala Inc"))
		val house = House("Rhodes,Greece")
		val person = Person("Kostas", company1, house)

		val inserted = insert(PersonEntity, person)
		inserted must_== person
		inserted.company = company2
		val updated = update(PersonEntity, inserted)
		updated must_== inserted

		val selected = select(PersonEntity, updated.id).get
		selected must_== updated

		mapperDao.delete(PersonEntity, selected)
		mapperDao.select(PersonEntity, selected.id) must beNone
	}

	def createTables =
		{
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
			Setup.database match {
				case "oracle" =>
					Setup.createSeq(jdbc, "CompanySeq")
					Setup.createSeq(jdbc, "HouseSeq")
					Setup.createSeq(jdbc, "PersonSeq")
				case _ =>
			}
		}
}

object ManyToOneMutableAutoGeneratedSpec {
	case class Person(var name: String, var company: Company, var lives: House)
	case class Company(var name: String)
	case class House(var address: String)

	object PersonEntity extends Entity[IntId, Person](classOf[Person]) {
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("PersonSeq")
			case _ => None
		}) autogenerated (_.id)
		val name = column("name") to (_.name)
		val company = manytoone(CompanyEntity) to (_.company)
		val lives = manytoone(HouseEntity) to (_.lives)

		def constructor(implicit m: ValuesMap) = new Person(name, company, lives) with IntId with Persisted {
			val id: Int = PersonEntity.id
		}
	}

	object CompanyEntity extends Entity[IntId, Company](classOf[Company]) {
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("CompanySeq")
			case _ => None
		}) autogenerated (_.id)
		val name = column("name") to (_.name)

		def constructor(implicit m: ValuesMap) = new Company(name) with IntId with Persisted {
			val id: Int = CompanyEntity.id
		}
	}

	object HouseEntity extends Entity[IntId, House](classOf[House]) {
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("HouseSeq")
			case _ => None
		}) autogenerated (_.id)
		val address = column("address") to (_.address)
		def constructor(implicit m: ValuesMap) = new House(address) with IntId with Persisted {
			val id: Int = HouseEntity.id
		}
	}
}