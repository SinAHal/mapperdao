package com.googlecode.mapperdao
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * May 4, 2012
 */
@RunWith(classOf[JUnitRunner])
class OneToManyDeclarePrimaryKeysSuite extends FunSuite with ShouldMatchers {

	if (Setup.database == "h2") {
		val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(HouseEntity, PersonEntity))

		test("update, update") {
			createTables()
			val inserted = mapperDao.insert(PersonEntity, Person("kostas", Set(House("address1"), House("address2"))))
			val otherInserted = mapperDao.insert(PersonEntity, Person("kostas", Set(House("address1"), House("address2"))))
			inserted.owns.head.address = "updated address"
			val u = Person("kostas updated", inserted.owns)
			val updated = mapperDao.update(PersonEntity, inserted, u)
			updated should be === u

			mapperDao.select(PersonEntity, inserted.id).get should be === updated
			mapperDao.select(PersonEntity, otherInserted.id).get should be === otherInserted
		}

		test("update, add") {
			createTables()
			val inserted = mapperDao.insert(PersonEntity, Person("kostas", Set(House("address1"))))
			val u = Person("kostas updated", inserted.owns + House("address2"))
			val updated = mapperDao.update(PersonEntity, inserted, u)
			updated should be === u

			mapperDao.select(PersonEntity, inserted.id).get should be === updated
		}

		test("update, remove") {
			createTables()
			val inserted = mapperDao.insert(PersonEntity, Person("kostas", Set(House("address1"), House("address2"))))
			val u = Person("kostas updated", inserted.owns - House("address2"))
			val updated = mapperDao.update(PersonEntity, inserted, u)
			updated should be === u

			mapperDao.select(PersonEntity, inserted.id).get should be === updated
		}

		def createTables() {
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
		}
	}
	case class Person(var name: String, owns: Set[House])
	case class House(var address: String)

	object HouseEntity extends SimpleEntity[House] {
		val address = column("address") to (_.address)

		declarePrimaryKey("address") { h => Some(h.address) }
		declarePrimaryKey("person_id") { h => None }

		def constructor(implicit m) = new House(address) with Persisted
	}

	object PersonEntity extends Entity[IntId, Person] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val owns = onetomany(HouseEntity) to (_.owns)

		def constructor(implicit m) = new Person(name, owns) with Persisted with IntId {
			val id: Int = PersonEntity.id
		}
	}
}