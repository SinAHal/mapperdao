package com.googlecode.mapperdao
import org.specs2.mutable.SpecificationWithJUnit
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 8 Nov 2011
 */
class ManyToManySimpleTypesSpec extends SpecificationWithJUnit {
	import ManyToManySimpleTypesSpec._
	val typeRegistry = TypeRegistry(ProductEntity)
	val (jdbc, mapperDao, queryDao) = Setup.setupQueryDao(typeRegistry)

	"insert, string based" in {
		createTables("string-based")
		val product = Product("computer", Set("PC", "laptop"))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted must_== product
	}

	"select, string based" in {
		createTables("string-based")
		val inserted = mapperDao.insert(ProductEntity, Product("computer", Set("PC", "laptop")))
		mapperDao.select(ProductEntity, inserted.id).get must_== inserted
	}

	"update, string based" in {
		createTables("string-based")
		val inserted = mapperDao.insert(ProductEntity, Product("computer", Set("PC", "laptop")))
		val updated = mapperDao.update(ProductEntity, inserted, Product("computer", Set("PC")))
		updated must_== Product("computer", Set("PC"))
		mapperDao.select(ProductEntity, inserted.id).get must_== updated
	}

	def createTables(sql: String) {
		Setup.dropAllTables(jdbc)
		val queries = Setup.queries(this, jdbc)
		queries.update(sql)
		//		Setup.database match {
		//			case "oracle" =>
		//				Setup.createSeq(jdbc, "ProductSeq")
		//			case _ =>
		//		}
	}
}

object ManyToManySimpleTypesSpec {
	case class Product(val name: String, val categories: Set[String])

	val se = StringEntity.manyToManyAutoGeneratedPK("Category", "id", "name")

	object ProductEntity extends Entity[IntId, Product](classOf[Product]) {
		val id = intAutoGeneratedPK("id", null, _.id)
		val name = string("name", _.name)
		val categories = manyToManySimpleTypeString("Product_Category", "product_id", "category_id", se, _.categories)
		def constructor(implicit m: ValuesMap) = new Product(name, categories) with IntId with Persisted {
			val id: Int = ProductEntity.id
		}
	}
}