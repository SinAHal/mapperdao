package com.googlecode.mapperdao
import org.specs2.mutable.SpecificationWithJUnit

/**
 * Option integration
 *
 * @author kostantinos.kougios
 *
 * 30 Oct 2011
 */
class OptionSpec extends SpecificationWithJUnit {
	case class Category(val name: String, val parent: Option[Category])

	object CategoryEntity extends Entity[IntId, Category](classOf[Category]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		// self reference 
		val parent = manyToOneOption("parent_id", classOf[Category], _.parent)

		def constructor(implicit m: ValuesMap) = {
			new Category(name, parent) with Persisted with IntId {
				val id: Int = CategoryEntity.id
			}
		}
	}

	val typeManager = new DefaultTypeManager()
	val typeRegistry = TypeRegistry(CategoryEntity)

	"manyToOneOption None=>null" in {
		CategoryEntity.parent.columnToValue(Category("x", None)) must beNull
	}

	"manyToOneOption Some(x)=>x" in {
		CategoryEntity.parent.columnToValue(Category("x", Some(Category("y", None)))) must_== Category("y", None)
	}

	"manyToOne constructor with None" in {
		val cat = Category("x", None)
		val newCat = CategoryEntity.constructor(ValuesMap.fromEntity(typeManager, typeRegistry.typeOfObject(cat), cat))
		newCat must_== cat
	}

	"manyToOne constructor with Some" in {
		val cat = Category("x", Some(Category("y", None)))
		val newCat = CategoryEntity.constructor(ValuesMap.fromEntity(typeManager, typeRegistry.typeOfObject(cat), cat))
		newCat must_== cat
	}
}