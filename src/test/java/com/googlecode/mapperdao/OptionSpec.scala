package com.googlecode.mapperdao
import org.specs2.mutable.SpecificationWithJUnit

/**
 * Option integration
 *
 * @author kostantinos.kougios
 *
 * 30 Oct 2011
 */
class OptionSpec extends SpecificationWithJUnit {
	case class Category(val name: String, val parent: Option[Category], val linked: Option[Category])
	case class Dog(val name: Option[String])

	object CategoryEntity extends Entity[IntId, Category](classOf[Category]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		// self reference 
		val parent = manyToOneOption("parent_id", classOf[Category], _.parent)
		val linked = oneToOneOption(classOf[Category], _.linked)

		def constructor(implicit m: ValuesMap) =
			new Category(name, parent, linked) with Persisted with IntId {
				val id: Int = CategoryEntity.id
			}
	}

	object DogEntity extends Entity[IntId, Dog](classOf[Dog]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = stringOption("name", _.name)

		def constructor(implicit m: ValuesMap) = new Dog(name) with Persisted with IntId {
			val id: Int = DogEntity.id
		}
	}

	val typeManager = new DefaultTypeManager()
	val typeRegistry = TypeRegistry(CategoryEntity)

	"manyToOneOption None=>null" in {
		CategoryEntity.parent.columnToValue(Category("x", None, None)) must beNull
	}

	"manyToOneOption Some(x)=>x" in {
		CategoryEntity.parent.columnToValue(Category("x", Some(Category("y", None, None)), None)) must_== Category("y", None, None)
	}

	"manyToOne/oneToOne constructor with None" in {
		val cat = Category("x", None, None)
		val newCat = CategoryEntity.constructor(ValuesMap.fromEntity(typeManager, typeRegistry.typeOfObject(cat), cat))
		newCat must_== cat
	}

	"manyToOne constructor with Some" in {
		val cat = Category("x", Some(Category("y", None, None)), None)
		val newCat = CategoryEntity.constructor(ValuesMap.fromEntity(typeManager, typeRegistry.typeOfObject(cat), cat))
		newCat must_== cat
	}

	"oneToOne None=>null" in {
		CategoryEntity.linked.columnToValue(Category("x", None, None)) must beNull
	}

	"oneToOneOption Some(x)=>x" in {
		CategoryEntity.linked.columnToValue(Category("x", None, Some(Category("y", None, None)))) must_== Category("y", None, None)
	}

	"oneToOne constructor with Some" in {
		val cat = Category("x", None, Some(Category("y", None, None)))
		val newCat = CategoryEntity.constructor(ValuesMap.fromEntity(typeManager, typeRegistry.typeOfObject(cat), cat))
		newCat must_== cat
	}
}