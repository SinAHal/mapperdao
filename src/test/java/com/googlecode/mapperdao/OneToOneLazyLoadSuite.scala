package com.googlecode.mapperdao

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 29 Apr 2012
 */
@RunWith(classOf[JUnitRunner])
class OneToOneLazyLoadSuite extends FunSuite with ShouldMatchers {

	val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(InventoryEntity, ProductEntity))

	if (Setup.database == "h2") {
		test("select is lazy") {
			createTables

			val p = Product(Inventory(8), 2)
			val inserted = mapperDao.insert(ProductEntity, p)

			val selected = mapperDao.select(SelectConfig(lazyLoad = LazyLoad.all), ProductEntity, inserted.id).get
			verifyNotLoaded(selected)
			selected should be === inserted
		}
	}

	def verifyNotLoaded(p: Product) {
		val persisted = p.asInstanceOf[Persisted]
		persisted.mapperDaoValuesMap.isLoaded(ProductEntity.inventory) should be(false)
	}

	def createTables =
		{
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
		}

	case class Inventory(var stock: Int)
	case class Product(var inventory: Inventory, val x: Int)

	object InventoryEntity extends SimpleEntity[Inventory] {
		val stock = column("stock") to (_.stock)

		def constructor(implicit m) = new Inventory(stock) with Persisted
	}

	object ProductEntity extends Entity[LongId, Product] {
		val id = key("id") autogenerated (_.id)
		val inventory = onetoonereverse(InventoryEntity) getter ("inventory") to (_.inventory)
		val x = column("x") to (_.x)

		def constructor(implicit m) = new Product(inventory, x) with LongId with Persisted {
			val id: Long = ProductEntity.id
		}
	}
}