package com.googlecode.mapperdao

import org.specs2.mutable.SpecificationWithJUnit

import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 11 Sep 2011
 */
class ManyToOneAndOneToManyCyclicAutoGeneratedSpec extends SpecificationWithJUnit {
	import ManyToOneAndOneToManyCyclicAutoGeneratedSpec._
	val (jdbc, driver, mapperDao) = Setup.setupMapperDao(TypeRegistry(PersonEntity, CompanyEntity))

	"insert" in {
		createTables
		import mapperDao._

		val company = insert(CompanyEntity, Company("Coders Ltd", List()))
		val person = Person("Coder1", company)
		insert(PersonEntity, person) must_== person
	}

	"select" in {
		createTables
		import mapperDao._

		val company = insert(CompanyEntity, Company("Coders Ltd", List()))
		val inserted = insert(PersonEntity, Person("Coder1", company))

		// the person in the list is a mock object due to the cyclic dependency, and company is null
		select(PersonEntity, inserted.id).get must_== Person("Coder1", Company("Coders Ltd", List(Person("Coder1", null))))
	}

	"update" in {
		createTables
		import mapperDao._

		val company = insert(CompanyEntity, Company("Coders Ltd", List()))
		val inserted = insert(PersonEntity, Person("Coder1", company))

		val selected = select(PersonEntity, inserted.id).get

		val updated = update(PersonEntity, selected, Person("Coder1-changed", company))
		updated must_== Person("Coder1-changed", Company("Coders Ltd", List()))

		select(CompanyEntity, company.id).get must_== Company("Coders Ltd", List(Person("Coder1-changed", Company("Coders Ltd", List()))))
	}

	def createTables =
		{
			Setup.dropAllTables(jdbc)
			Setup.database match {
				case "postgresql" | "mysql" =>
					jdbc.update("""
					create table Company (
						id serial not null,
						name varchar(100) not null,
						primary key(id)
					)
			""")
					jdbc.update("""
					create table Person (
						id serial not null,
						name varchar(100) not null,
						company_id int,
						primary key(id),
						foreign key (company_id) references Company(id) on delete cascade
					)
			""")
				case "oracle" =>
					jdbc.update("""
					create table Company (
						id int not null,
						name varchar(100) not null,
						primary key(id)
					)
			""")
					jdbc.update("""
					create table Person (
						id int not null,
						name varchar(100) not null,
						company_id int,
						primary key(id),
						foreign key (company_id) references Company(id) on delete cascade
					)
			""")
					Setup.createSeq(jdbc, "CompanySeq")
					Setup.createSeq(jdbc, "PersonSeq")
				case "derby" =>
					jdbc.update("""
					create table Company (
						id int not null GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
						name varchar(100) not null,
						primary key(id)
					)
			""")
					jdbc.update("""
					create table Person (
						id int not null GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
						name varchar(100) not null,
						company_id int,
						primary key(id),
						foreign key (company_id) references Company(id) on delete cascade
					)
			""")
			}
		}
}

object ManyToOneAndOneToManyCyclicAutoGeneratedSpec {
	case class Person(val name: String, val company: Company)
	case class Company(val name: String, employees: List[Person])

	object PersonEntity extends Entity[IntId, Person](classOf[Person]) {
		val id = Setup.database match {
			case "oracle" => intAutoGeneratedPK("id", "PersonSeq", _.id)
			case _ => intAutoGeneratedPK("id", _.id)
		}
		val name = string("name", _.name)
		val company = manyToOne(CompanyEntity, _.company)

		def constructor(implicit m: ValuesMap) = new Person(name, company) with Persisted with IntId {
			val id = m(PersonEntity.id)
		}
	}

	object CompanyEntity extends Entity[IntId, Company](classOf[Company]) {
		val id = Setup.database match {
			case "oracle" => intAutoGeneratedPK("id", "CompanySeq", _.id)
			case _ => intAutoGeneratedPK("id", _.id)
		}
		val name = string("name", _.name)
		val employees = oneToMany(PersonEntity, _.employees)
		def constructor(implicit m: ValuesMap) = new Company(name, employees) with Persisted with IntId {
			val id = m(CompanyEntity.id)
		}
	}

}