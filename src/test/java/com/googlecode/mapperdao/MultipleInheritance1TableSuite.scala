package com.googlecode.mapperdao

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import org.joda.time.DateTime
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 25 Jul 2012
 */
@RunWith(classOf[JUnitRunner])
class MultipleInheritance1TableSuite extends FunSuite with ShouldMatchers {

	if (Setup.database == "h2") {
		val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(ReminderEntity))

		test("crud for Daily") {
			createTables()

			val inserted = mapperDao.insert(ReminderEntity, Daily(12))
			inserted should be === Daily(12)
			mapperDao.select(ReminderEntity, inserted.id).get should be === Daily(12)

			val updated = mapperDao.update(ReminderEntity, inserted, Daily(14))
			updated should be === Daily(14)
			mapperDao.select(ReminderEntity, inserted.id).get should be === Daily(14)
		}

		def createTables() {
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
		}
	}
	abstract class Reminder

	case class Daily(hourOfDay: Short) extends Reminder
	case class Weekly(hourOfDay: Short, dayOfWeek: Short) extends Reminder
	case class RemindOnce(time: DateTime) extends Reminder

	object ReminderEntity extends Entity[IntId, Reminder] {
		val id = key("id") autogenerated (_.id)
		// we will map the inheritance into the "type" column 
		val t = column("type") to {
			case _: Daily => 0 // type=0 for Daily class
			case _: Weekly => 1 // type=1 for Weekly class
			case _: RemindOnce => 2 // type=2 for Monthly class
		}
		val hourOfDay = column("hourOfDay") to {
			case daily: Daily => daily.hourOfDay
			case weekly: Weekly => weekly.hourOfDay
			case _: RemindOnce => -1.toShort
		}
		val dayOfWeek = column("dayOfWeek") to {
			case _: Daily => -1.toShort
			case weekly: Weekly => weekly.dayOfWeek
			case _: RemindOnce => -1.toShort
		}
		val time = column("time") to {
			case _: Daily => null
			case _: Weekly => null
			case remindOnce: RemindOnce => remindOnce.time
		}

		def constructor(implicit m) = m(t) match {
			case 0 => new Daily(hourOfDay) with IntId with Persisted {
				val id: Int = ReminderEntity.id
			}
			case 1 =>
				new Weekly(hourOfDay, dayOfWeek) with IntId with Persisted {
					val id: Int = ReminderEntity.id
				}
			case 2 => new RemindOnce(time) with IntId with Persisted {
				val id: Int = ReminderEntity.id
			}
		}
	}
}