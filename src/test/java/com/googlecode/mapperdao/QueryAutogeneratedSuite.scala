package com.googlecode.mapperdao
import com.googlecode.mapperdao.jdbc.Setup
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import org.junit.runner.RunWith
/**
 * @author kostantinos.kougios
 *
 * 16 Dec 2011
 */
@RunWith(classOf[JUnitRunner])
class QueryAutogeneratedSuite extends FunSuite with ShouldMatchers {

	val typeRegistry = TypeRegistry(JobEntity)
	val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(typeRegistry)

	// an alias
	val je = JobEntity

	import Query._

	test("query returns id") {
		createTables
		mapperDao.insert(JobEntity, Job("job1"))
		val l = queryDao.query(select from je)
		l.head.id should be > (0)
	}

	def createTables {
		Setup.dropAllTables(jdbc)
		Setup.database match {
			case "oracle" => Setup.createMySeq(jdbc)
			case _ =>
		}
		Setup.queries(this, jdbc).update("ddl")
	}

	case class Job(var name: String)

	object JobEntity extends Entity[IntId, Job](classOf[Job]) {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)

		def constructor(implicit m) = new Job(name) with IntId with Persisted {
			// we force the value to int cause mysql AUTO_GENERATED always returns Long instead of Int
			val id: Int = JobEntity.id
		}
	}
}