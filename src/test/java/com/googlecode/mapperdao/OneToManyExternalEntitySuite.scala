package com.googlecode.mapperdao
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

/**
 * @author kostantinos.kougios
 *
 * 26 Jan 2012
 */
@RunWith(classOf[JUnitRunner])
class OneToManyExternalEntitySuite extends FunSuite with ShouldMatchers {

	val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(HouseEntity, PersonEntity))

	if (Setup.database == "h2") {
		test("persist/select") {
			createTables

			val person = Person("p1", Set(House(10, "London"), House(11, "Paris")))
			val inserted = mapperDao.insert(PersonEntity, person)
			inserted should be === person
		}
	}

	def createTables {
		Setup.dropAllTables(jdbc)
		Setup.queries(this, jdbc).update("ddl")
	}
	case class Person(var name: String, owns: Set[House])
	case class House(val id: Int, val address: String)

	object PersonEntity extends Entity[IntId, Person](classOf[Person]) {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val owns = onetomany(HouseEntity) to (_.owns)

		def constructor(implicit m) = new Person(name, owns) with Persisted with IntId {
			val id: Int = PersonEntity.id
		}
	}

	object HouseEntity extends ExternalEntity[Int, Unit, House](classOf[House]) {
		def primaryKeyValues(h) = (h.id, None)
	}

}