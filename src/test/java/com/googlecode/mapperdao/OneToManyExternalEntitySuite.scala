package com.googlecode.mapperdao
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers
import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

/**
 * @author kostantinos.kougios
 *
 * 26 Jan 2012
 */
@RunWith(classOf[JUnitRunner])
class OneToManyExternalEntitySuite extends FunSuite with ShouldMatchers {

	val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(HouseEntity, PersonEntity))

	if (Setup.database == "h2") {
		test("persist/select") {
			createTables

			val person = Person("p1", HouseEntity.currentData.toSet)
			val inserted = mapperDao.insert(PersonEntity, person)
			inserted should be === person
			HouseEntity.onInsertCalls should be === 1

			mapperDao.select(PersonEntity, inserted.id).get should be === inserted
		}

		test("update") {
			createTables

			val person = Person("p1", HouseEntity.currentData.toSet)
			val inserted = mapperDao.insert(PersonEntity, person)
			val toUpdate = Person("p1-1", inserted.owns.filter(_.id == 11))
			val updated = mapperDao.update(PersonEntity, inserted, toUpdate)
			updated should be === toUpdate
			mapperDao.select(PersonEntity, inserted.id).get should be === updated
		}

		test("delete") {
			createTables

			val person = Person("p1", Set(House(11, "house for 1"), House(12, "2nd house for 1")))
			val inserted = mapperDao.insert(PersonEntity, person)
			mapperDao.delete(PersonEntity, inserted)
			mapperDao.select(PersonEntity, inserted.id) should be(None)
		}
	}

	def createTables {
		Setup.dropAllTables(jdbc)
		Setup.queries(this, jdbc).update("ddl")
	}
	case class Person(var name: String, owns: Set[House])
	case class House(val id: Int, val address: String)

	object PersonEntity extends Entity[IntId, Person](classOf[Person]) {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val owns = onetomany(HouseEntity) to (_.owns)

		def constructor(implicit m) = new Person(name, owns) with Persisted with IntId {
			val id: Int = PersonEntity.id
		}
	}

	object HouseEntity extends ExternalEntity[Int, Unit, House](classOf[House]) {

		var currentData = List(House(10, "House10"), House(11, "House11"))

		var onInsertCalls = 0
		onInsertOneToMany(PersonEntity.owns) { i =>
			onInsertCalls += 1
		}
		onSelect(PersonEntity.owns) {
			_.foreignIds match {
				case List(foreignId: Int) => currentData
				case _ => throw new RuntimeException
			}
		}
		onUpdate(PersonEntity.owns) { u =>
			currentData = (u.added ++ u.intersection).toList
		}
	}
}