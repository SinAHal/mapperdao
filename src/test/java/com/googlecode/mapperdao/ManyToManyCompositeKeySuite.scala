package com.googlecode.mapperdao

import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers

/**
 * @author kostantinos.kougios
 *
 * 23 Jul 2012
 */
@RunWith(classOf[JUnitRunner])
class ManyToManyCompositeKeySuite extends FunSuite with ShouldMatchers {

	if (Setup.database != "h2") {
		val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(UserEntity, AccountEntity))

		test("insert") {
			createTables()

			// add some noise
			mapperDao.insert(UserEntity, User("ref1", "user X", Set(Account(50, "Noise1"), Account(51, "Noise2"), Account(52, "Noise3"))))

			// and now the real thing
			val acc1 = Account(1500, "Mr X1")
			val acc2 = Account(1600, "Mr X2")

			mapperDao.insert(UserEntity, User("ref1", "user X", Set(acc1, acc2)))
		}

		def createTables() =
			{
				Setup.dropAllTables(jdbc)
				Setup.queries(this, jdbc).update("ddl")
			}
	}
	case class User(reference: String, name: String, accounts: Set[Account])
	case class Account(serial: Long, name: String)

	object UserEntity extends Entity[IntId, User] {
		val id = key("id") autogenerated (_.id)
		val reference = key("reference") to (_.reference)
		val name = column("name") to (_.name)
		val accounts = manytomany(AccountEntity) to (_.accounts)

		def constructor(implicit m) = new User(reference, name, accounts) with IntId with Persisted {
			val id: Int = UserEntity.id
		}
	}

	object AccountEntity extends Entity[IntId, Account] {
		val id = key("id") autogenerated (_.id)
		val serial = key("serial") to (_.serial)
		val name = column("name") to (_.name)
		def constructor(implicit m) = new Account(serial, name) with IntId with Persisted {
			val id: Int = AccountEntity.id
		}
	}
}
