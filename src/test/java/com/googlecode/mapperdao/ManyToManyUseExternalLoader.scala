package com.googlecode.mapperdao
import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner

/**
 * @author kostantinos.kougios
 *
 * Jan 18, 2012
 */
@RunWith(classOf[JUnitRunner])
class ManyToManyUseExternalLoader extends FunSuite with ShouldMatchers {
	var counter = 0

	val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(ProductEntity, AttributeEntity))

	test("persists externally") {
		createTables

		val product = Product("p1", Set(Attribute("a1"), Attribute("a2")))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted should be === product
	}

	def createTables {
		counter = 0
		Setup.dropAllTables(jdbc)
		Setup.queries(this, jdbc).update("ddl")
	}

	case class Product(val name: String, val attributes: Set[Attribute])
	case class Attribute(val name: String)

	object ProductEntity extends Entity[IntId, Product](classOf[Product]) {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val attributes = manytomany(AttributeEntity) to (_.attributes)

		def constructor(implicit m) = new Product(name, attributes) with IntId with Persisted {
			val id: Int = ProductEntity.id
		}
	}

	object AttributeEntity extends ExternalEntity[IntId, Attribute](classOf[Attribute]) {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)

		def constructor(implicit m) = new Attribute(name) with Persisted with IntId {
			val id: Int = AttributeEntity.id
		}

		def select(selectConfig) = {
			counter += 1
			new Attribute("x" + counter) with IntId {
				val id = counter
			}
		}

		def insert(updateConfig, t) = t
	}

}