package com.googlecode.mapperdao
import org.specs2.mutable.SpecificationWithJUnit
import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.specs2.runner.JUnitRunner

/**
 * @author kostantinos.kougios
 *
 * 31 Oct 2011
 */
@RunWith(classOf[JUnitRunner])
class OneToManySimpleTypesSpec extends SpecificationWithJUnit {
	import OneToManySimpleTypesSpecString._
	import OneToManySimpleTypesSpecInt._
	val typeRegistry = TypeRegistry(ProductEntity, ProductEntityI)
	val (jdbc, mapperDao, queryDao) = Setup.setupQueryDao(typeRegistry)

	"insert" in {
		createTables("create-tables-string")
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted must_== product
	}

	"select" in {
		createTables("create-tables-string")
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		mapperDao.select(ProductEntity, inserted.id).get must_== product
	}

	"update, remove" in {
		createTables("create-tables-string")
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		val up = Product(inserted.name, inserted.tags.filterNot(_ == "tag2"))
		val updated = mapperDao.update(ProductEntity, inserted, up)
		updated must_== up
		mapperDao.select(ProductEntity, inserted.id).get must_== updated
	}

	"update, add" in {
		createTables("create-tables-string")
		val product = Product("test", Set("tag1"))
		val inserted = mapperDao.insert(ProductEntity, product)
		val up = Product(inserted.name, inserted.tags ++ Set("tag2", "tag3"))
		val updated = mapperDao.update(ProductEntity, inserted, up)
		updated must_== up
		mapperDao.select(ProductEntity, inserted.id).get must_== updated
	}

	"query" in {
		createTables("create-tables-string")
		val p1 = mapperDao.insert(ProductEntity, Product("test1", Set("tag1", "tag2", "tag3")))
		val p2 = mapperDao.insert(ProductEntity, Product("test2", Set("tag10", "tag20", "tag3")))
		val p3 = mapperDao.insert(ProductEntity, Product("test3", Set("tag10", "tag20", "tag30")))

		queryDao.query(q0).toSet must_== Set(p1, p2)
	}

	"IntEntity : update, remove" in {
		createTables("create-tables-int")
		val product = ProductI("test", Set(5, 6, 7))
		val inserted = mapperDao.insert(ProductEntityI, product)
		val up = ProductI(inserted.name, inserted.tags.filterNot(_ == 6))
		val updated = mapperDao.update(ProductEntityI, inserted, up)
		updated must_== up
		mapperDao.select(ProductEntityI, inserted.id).get must_== updated
	}

	def createTables(sql: String) {
		Setup.dropAllTables(jdbc)
		val queries = Setup.queries(this, jdbc)
		queries.update(sql)
		Setup.database match {
			case "oracle" =>
				Setup.createSeq(jdbc, "ProductSeq")
			case _ =>
		}

	}
}

object OneToManySimpleTypesSpecString {
	case class Product(name: String, tags: Set[String])

	val TagsEntity = StringEntity.oneToMany("ProductTags", "product_id", "tag")

	object ProductEntity extends Entity[IntId, Product](classOf[Product]) {
		val id = intAutoGeneratedPK("id", Setup.database match {
			case "oracle" => "ProductSeq"
			case _ => null
		}, _.id)
		val name = string("name", _.name)
		val tags = oneToManySimpleTypeString(TagsEntity, _.tags)
		def constructor(implicit m: ValuesMap) = new Product(name, tags) with IntId with Persisted {
			val id: Int = ProductEntity.id
		}
	}

	// queries

	import Query._
	val pe = ProductEntity
	val te = TagsEntity
	def q0 = (
		select from pe
		join (pe, pe.tags, te)
		where te.value === "tag3"
	)
}

object OneToManySimpleTypesSpecInt {
	case class ProductI(name: String, tags: Set[Int])

	val TagsEntityI = IntEntity.oneToMany("ProductTagsI", "producti_id", "intTag")
	object ProductEntityI extends Entity[IntId, ProductI](classOf[ProductI]) {
		val id = intAutoGeneratedPK("id", Setup.database match {
			case "oracle" => "ProductSeq"
			case _ => null
		}, _.id)
		val name = string("name", _.name)
		val tags = oneToManySimpleTypeInt(TagsEntityI, _.tags)
		def constructor(implicit m: ValuesMap) = new ProductI(name, tags) with IntId with Persisted {
			val id: Int = ProductEntityI.id
		}
	}
}