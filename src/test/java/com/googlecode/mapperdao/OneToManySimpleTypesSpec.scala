package com.googlecode.mapperdao
import org.specs2.mutable.SpecificationWithJUnit
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 31 Oct 2011
 */
class OneToManySimpleTypesSpec extends SpecificationWithJUnit {
	import OneToManySimpleTypesSpec._
	val typeRegistry = TypeRegistry(ProductEntity)
	val (jdbc, driver, mapperDao) = Setup.setupMapperDao(typeRegistry)

	"insert" in {
		createTables
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted must_== product
	}

	"select" in {
		createTables
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		mapperDao.select(ProductEntity, inserted.id).get must_== product
	}

	"update, remove" in {
		createTables
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		val up = Product(inserted.name, inserted.tags.filterNot(_ == "tag2"))
		val updated = mapperDao.update(ProductEntity, inserted, up)
		updated must_== up
		mapperDao.select(ProductEntity, inserted.id).get must_== updated
	}

	"update, add" in {
		createTables
		val product = Product("test", Set("tag1"))
		val inserted = mapperDao.insert(ProductEntity, product)
		val up = Product(inserted.name, inserted.tags ++ Set("tag2", "tag3"))
		val updated = mapperDao.update(ProductEntity, inserted, up)
		updated must_== up
		mapperDao.select(ProductEntity, inserted.id).get must_== updated
	}

	def createTables {
		Setup.dropAllTables(jdbc)
		val queries = Setup.queries(this, jdbc)
		queries.update("create-tables")
	}
}

object OneToManySimpleTypesSpec {
	case class Product(name: String, tags: Set[String])

	object ProductEntity extends Entity[IntId, Product](classOf[Product]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		val tags = oneToMany(TagsEntity, _.tags.map(StringValue(_)))
		def constructor(implicit m: ValuesMap) = new Product(name, m(tags).map(_.value).toSet) with IntId with Persisted {
			val id: Int = ProductEntity.id
		}
	}

	case class StringValue(val value: String)
	class StringEntity(table: String, fkColumn: String, soleColumn: String) extends SimpleEntity[StringValue](table, classOf[StringValue]) {
		val value = string(soleColumn, _.value)
		declarePrimaryKeys(fkColumn, soleColumn)
		def constructor(implicit m: ValuesMap) = new StringValue(value) with Persisted
	}
	object TagsEntity extends StringEntity("ProductTags", "product_id", "tag")
}