package com.googlecode.mapperdao
import org.specs2.mutable.SpecificationWithJUnit
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 31 Oct 2011
 */
class OneToManySimpleTypesSpec extends SpecificationWithJUnit {
	import OneToManySimpleTypesSpec._
	val typeRegistry = TypeRegistry(ProductEntity)
	val (jdbc, mapperDao, queryDao) = Setup.setupQueryDao(typeRegistry)

	"insert" in {
		createTables
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted must_== product
	}

	"select" in {
		createTables
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		mapperDao.select(ProductEntity, inserted.id).get must_== product
	}

	"update, remove" in {
		createTables
		val product = Product("test", Set("tag1", "tag2", "tag3"))
		val inserted = mapperDao.insert(ProductEntity, product)
		val up = Product(inserted.name, inserted.tags.filterNot(_ == "tag2"))
		val updated = mapperDao.update(ProductEntity, inserted, up)
		updated must_== up
		mapperDao.select(ProductEntity, inserted.id).get must_== updated
	}

	"update, add" in {
		createTables
		val product = Product("test", Set("tag1"))
		val inserted = mapperDao.insert(ProductEntity, product)
		val up = Product(inserted.name, inserted.tags ++ Set("tag2", "tag3"))
		val updated = mapperDao.update(ProductEntity, inserted, up)
		updated must_== up
		mapperDao.select(ProductEntity, inserted.id).get must_== updated
	}

	"query" in {
		createTables
		val p1 = mapperDao.insert(ProductEntity, Product("test1", Set("tag1", "tag2", "tag3")))
		val p2 = mapperDao.insert(ProductEntity, Product("test2", Set("tag10", "tag20", "tag3")))
		val p3 = mapperDao.insert(ProductEntity, Product("test3", Set("tag10", "tag20", "tag30")))

		queryDao.query(q0).toSet must_== Set(p1, p2)
	}

	def createTables {
		Setup.dropAllTables(jdbc)
		val queries = Setup.queries(this, jdbc)
		queries.update("create-tables")
	}
}

object OneToManySimpleTypesSpec {
	case class Product(name: String, tags: Set[String])

	object ProductEntity extends Entity[IntId, Product](classOf[Product]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		val tags = oneToMany(TagsEntity, _.tags.map(StringValue(_)))
		def constructor(implicit m: ValuesMap) = new Product(name, m(tags).map(_.value).toSet) with IntId with Persisted {
			val id: Int = ProductEntity.id
		}
	}
	object TagsEntity extends StringEntity("ProductTags", "product_id", "tag")

	// queries

	import Query._
	val pe = ProductEntity
	val te = TagsEntity
	def q0 = (
		select from pe
		join (pe, pe.tags, te)
		where te.value === "tag3"
	)
}