package com.googlecode.mapperdao

import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers

/**
 * @author kostantinos.kougios
 *
 * 26 Jul 2012
 */
@RunWith(classOf[JUnitRunner])
class ManyToOneCompositeKeySuite extends FunSuite with ShouldMatchers {

	val database = Setup.database
	if (database != "h2") {
		implicit val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(CityEntity, HouseEntity))

		test("insert, select and delete") {
			createTables()
			val city = mapperDao.insert(CityEntity, City("LDN", "London"))
			val h1 = House("Putney", city)
			val h2 = House("Greenwitch", city)
			val h1i = mapperDao.insert(HouseEntity, h1)
			h1i should be === h1
			val h2i = mapperDao.insert(HouseEntity, h2)
			h2i should be === h2
		}

		def createTables() =
			{
				Setup.dropAllTables(jdbc)
				Setup.queries(this, jdbc).update("ddl")
			}
	}

	case class House(address: String, city: City)
	case class City(reference: String, name: String)

	object CityEntity extends Entity[IntId, City] {
		val id = key("id") autogenerated (_.id)
		val reference = key("reference") to (_.reference)
		val name = column("name") to (_.name)

		def constructor(implicit m) = new City(reference, name) with IntId with Persisted {
			val id: Int = CityEntity.id
		}
	}

	object HouseEntity extends Entity[IntId, House] {
		val id = key("id") autogenerated (_.id)
		val address = column("address") to (_.address)
		val city = manytoone(CityEntity) to (_.city)

		def constructor(implicit m) = new House(address, city) with IntId with Persisted {
			val id: Int = HouseEntity.id
		}
	}
}