package com.googlecode.mapperdao

import org.specs2.mutable.SpecificationWithJUnit

import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 8 Aug 2011
 */
class ManyToManyNonRecursiveSpec extends SpecificationWithJUnit {
	import ManyToManyNonRecursiveSpec._

	val (jdbc, mapperDao) = setup

	"insert tree of entities" in {
		createTables
		val product = Product("blue jean", Set(Attribute("colour", "blue"), Attribute("size", "medium")))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted must_== product

		// due to cyclic reference, the attributes set contains "mock" products which have empty traversables.
		// it is not possible to create cyclic-depended immutable instances.
		mapperDao.select(ProductEntity, inserted.id).get must_== inserted

		// attributes->product should also work
		val colour = inserted.attributes.toList.filter(_.name == "colour").head
		val loadedAttribute = mapperDao.select(AttributeEntity, mapperDao.intIdOf(colour)).get
		loadedAttribute must_== Attribute("colour", "blue")
	}

	"insert tree of entities with persisted leaf entities" in {
		createTables
		val a1 = mapperDao.insert(AttributeEntity, Attribute("colour", "blue"))
		val a2 = mapperDao.insert(AttributeEntity, Attribute("size", "medium"))
		val product = Product("blue jean", Set(a1, a2))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted must_== product

		// due to cyclic reference, the attributes collection contains "mock" products which have empty traversables
		mapperDao.select(ProductEntity, inserted.id).get must_== inserted
	}

	def createTables =
		{
			Setup.dropAllTables(jdbc)
			jdbc.update("""
					create table Product (
						id serial not null,
						name varchar(100) not null,
						primary key(id)
					)
			""")
			jdbc.update("""
					create table Attribute (
						id serial not null,
						name varchar(100) not null,
						value varchar(100) not null,
						primary key(id)
					)
			""")
			jdbc.update("""
					create table Product_Attribute (
						product_id int not null,
						attribute_id int not null,
						primary key(product_id,attribute_id)
					)
			""")
		}
	def setup =
		{
			val typeRegistry = TypeRegistry(ProductEntity, AttributeEntity)

			Setup.setupMapperDao(typeRegistry)
		}
}

object ManyToManyNonRecursiveSpec {
	case class Product(val name: String, val attributes: Set[Attribute])
	case class Attribute(val name: String, val value: String)

	object ProductEntity extends Entity[IntId, Product]("Product", classOf[Product]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		val attributes = manyToMany(classOf[Attribute], _.attributes)

		val constructor = (m: ValuesMap) => new Product(m(name), m(attributes).toSet) with Persisted with IntId {
			val valuesMap = m
			val id = m.int(ProductEntity.id) // we explicitly convert this to an int because mysql serial values are always BigInteger (a bug maybe?)
		}
	}
	object AttributeEntity extends Entity[IntId, Attribute]("Attribute", classOf[Attribute]) {
		val id = intAutoGeneratedPK("id", _.id)
		val name = string("name", _.name)
		val value = string("value", _.value)

		val constructor = (m: ValuesMap) => new Attribute(m(name), m(value)) with Persisted with IntId {
			val valuesMap = m
			val id = m.int(AttributeEntity.id) // we explicitly convert this to an int because mysql serial values are always BigInteger (a bug maybe?)
		}
	}
}