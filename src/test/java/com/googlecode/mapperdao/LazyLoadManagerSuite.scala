package com.googlecode.mapperdao

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite

/**
 * @author kostantinos.kougios
 *
 * 27 Apr 2012
 */
@RunWith(classOf[JUnitRunner])
class LazyLoadManagerSuite extends FunSuite with ShouldMatchers {

	val lazyLoadManager = new LazyLoadManager
	val typeManager = new DefaultTypeManager

	test("lazy load Set") {
		val h1 = new House("Rhodes")
		val h2 = new House("Athens")
		val p = new Person("Kostas", Set()) with IntId {
			val id = 5
		}
		val vm = ValuesMap.fromEntity(typeManager, PersonEntity.tpe, p)
		vm(PersonEntity.owns) = () => List(h1, h2) // vm always stores lists

		val lazyP = lazyLoadManager.proxyFor(p, PersonEntity, LazyLoad.all, vm)
		vm.isLoaded(PersonEntity.owns) should be(false)

		lazyP.owns should be(Set(h1, h2))
	}

	case class Person(name: String, owns: Set[House])
	case class House(address: String)

	object HouseEntity extends Entity[IntId, House] {
		val id = key("id") autogenerated (_.id)
		val address = column("address") to (_.address)

		def constructor(implicit m) = new House(address) with Persisted with IntId {
			val id: Int = HouseEntity.id
		}
	}

	object PersonEntity extends Entity[IntId, Person] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val owns = onetomany(HouseEntity) getter ("owns") to (_.owns)

		def constructor(implicit m) = new Person(name, owns) with Persisted with IntId {
			val id: Int = PersonEntity.id
		}
	}
}