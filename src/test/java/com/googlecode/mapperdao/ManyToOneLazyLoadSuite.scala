package com.googlecode.mapperdao

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 23 Apr 2012
 */
@RunWith(classOf[JUnitRunner])
class ManyToOneLazyLoadSuite extends FunSuite with ShouldMatchers {

	val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(PersonEntity, CompanyEntity))

	if (Setup.database == "h2") {
		test("select is lazy") {
			createTables
			val company = Company("Coders limited")
			val person = Person("Kostas", company)

			val inserted = mapperDao.insert(PersonEntity, person)
			val selected = mapperDao.select(SelectConfig(lazyLoad = LazyLoad(all = true)), PersonEntity, inserted.id).get
			verifyNotLoadded(selected)
			selected should be === inserted
			selected.id should be > 0
		}
	}

	def verifyNotLoadded(o: Any) {
		val persisted = o.asInstanceOf[Persisted]
		classOf[scala.Function0[_]].isAssignableFrom(persisted.mapperDaoValuesMap.columnValue(PersonEntity.company).getClass) should be(true)
	}

	def createTables =
		{
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
		}

	case class Person(val name: String, val company: Company)
	case class Company(val name: String)

	object PersonEntity extends Entity[IntId, Person] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val company = manytoone(CompanyEntity) getter ("company") to (_.company)

		def constructor(implicit m) = new Person(name, company) with IntId with Persisted {
			val id: Int = PersonEntity.id
		}
	}

	object CompanyEntity extends Entity[IntId, Company] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)

		def constructor(implicit m) = new Company(name) with IntId with Persisted {
			val id: Int = CompanyEntity.id
		}
	}
}