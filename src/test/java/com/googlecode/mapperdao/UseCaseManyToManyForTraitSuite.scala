package com.googlecode.mapperdao
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import com.googlecode.mapperdao.jdbc.Setup

/**
 * @author kostantinos.kougios
 *
 * 7 Jul 2012
 */
@RunWith(classOf[JUnitRunner])
class UseCaseManyToManyForTraitSuite extends FunSuite with ShouldMatchers {

	if (Setup.database == "h2") {
		val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(PersonEntity, CompanyEntity, ContactListEntity))

		test("insert and select") {
			createTables()

			val cl = ContactList("list1", Set(Person("kostas", 20), Person("nick", 30), Company("com1", "xx55")))
			val inserted = mapperDao.insert(ContactListEntity, cl)
			inserted should be === cl

			val selected = mapperDao.select(ContactListEntity, inserted.id).get
			selected should be === cl
		}

		def createTables() {
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
		}
	}

	trait Party {
		val name: String
	}

	case class Person(name: String, age: Double) extends Party

	case class Company(name: String, registration: String) extends Party

	case class ContactList(name: String, parties: Set[Party])

	object PersonEntity extends Entity[IntId, Person] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val age = column("age") to (_.age)

		def constructor(implicit m: ValuesMap) = new Person(name, age) with IntId with Persisted {
			val id: Int = PersonEntity.id
		}
	}

	object CompanyEntity extends Entity[IntId, Company] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val registration = column("registration") to (_.registration)

		def constructor(implicit m: ValuesMap) = new Company(name, registration) with IntId with Persisted {
			val id: Int = CompanyEntity.id
		}
	}

	object ContactListEntity extends Entity[IntId, ContactList] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val people = manytomany(PersonEntity) to (_.parties.collect {
			case p: Person => p
		})
		val companies = manytomany(CompanyEntity) to (_.parties.collect {
			case c: Company => c
		})

		def constructor(implicit m: ValuesMap) = {
			val cs = m(companies).toSet
			val ppl = m(people).toSet
			new ContactList(name, ppl ++ cs) with IntId with Persisted {
				val id: Int = ContactListEntity.id
			}
		}
	}
}