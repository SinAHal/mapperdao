package com.googlecode.mapperdao

import org.junit.runner.RunWith
import org.scalatest.matchers.ShouldMatchers
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner
import com.googlecode.mapperdao.jdbc.Setup
import com.googlecode.mapperdao.jdbc.Transaction

/**
 * @author kostantinos.kougios
 *
 * 6 May 2012
 */
@RunWith(classOf[JUnitRunner])
class ParallelQuerySuite extends FunSuite with ShouldMatchers {

	if (Setup.database == "postgresql") {
		val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(TypeRegistry(ProductEntity, AttributeEntity))
		val txManager = Transaction.transactionManager(jdbc)

		test("parallel query") {
			createTables

			val tx = Transaction.default(txManager)
			val (attrs, products) = tx { () =>
				val attrs = for (i <- 1 to 20) yield {
					mapperDao.insert(AttributeEntity, Attribute("a" + i, "v" + i))
				}
				val products = for (i <- 1 to 1000) yield {
					val idx = i % 19
					mapperDao.insert(ProductEntity, Product("product" + i, Set(attrs(idx), attrs(idx + 1))))
				}
				(attrs, products)
			}

			import Query._
			val loaded = queryDao.query(select from ProductEntity).toSet
			products.toSet should be === loaded
		}

		def createTables {
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
		}
	}

	case class Product(val name: String, val attributes: Set[Attribute])
	case class Attribute(val name: String, val value: String)

	object ProductEntity extends Entity[IntId, Product] {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		val attributes = manytomany(AttributeEntity) to (_.attributes)

		def constructor(implicit m) = new Product(name, attributes) with IntId with Persisted {
			val id: Int = ProductEntity.id
		}
	}

	object AttributeEntity extends Entity[IntId, Attribute] {
		val id = Setup.database match {
			case "oracle" => key("id") autogenerated (_.id)
			case _ => key("id") autogenerated (_.id)
		}
		val name = column("name") to (_.name)
		val value = column("value") to (_.value)

		def constructor(implicit m) = new Attribute(name, value) with Persisted with IntId {
			val id: Int = AttributeEntity.id
		}
	}
}