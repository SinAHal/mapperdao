package com.googlecode.mapperdao

import com.googlecode.mapperdao.jdbc.Setup
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite
import org.scalatest.matchers.ShouldMatchers

/**
 * @author kostantinos.kougios
 *
 * 8 Aug 2011
 */
@RunWith(classOf[JUnitRunner])
class ManyToManyNonRecursiveSuite extends FunSuite with ShouldMatchers {
	val typeRegistry = TypeRegistry(ProductEntity, AttributeEntity)

	val (jdbc, mapperDao, queryDao) = Setup.setupMapperDao(typeRegistry)

	test("insert tree of entities") {
		createTables
		val product = Product("blue jean", Set(Attribute("colour", "blue"), Attribute("size", "medium")))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted should be === product

		// due to cyclic reference, the attributes set contains "mock" products which have empty traversables.
		// it is not possible to create cyclic-depended immutable instances.
		mapperDao.select(ProductEntity, inserted.id).get should be === inserted

		// attributes->product should also work
		val colour = inserted.attributes.toList.filter(_.name == "colour").head
		val loadedAttribute = mapperDao.select(AttributeEntity, mapperDao.intIdOf(colour)).get
		loadedAttribute should be === Attribute("colour", "blue")
	}

	test("insert tree of entities with persisted leaf entities") {
		createTables
		val a1 = mapperDao.insert(AttributeEntity, Attribute("colour", "blue"))
		val a2 = mapperDao.insert(AttributeEntity, Attribute("size", "medium"))
		val product = Product("blue jean", Set(a1, a2))
		val inserted = mapperDao.insert(ProductEntity, product)
		inserted should be === product

		// due to cyclic reference, the attributes collection contains "mock" products which have empty traversables
		mapperDao.select(ProductEntity, inserted.id).get should be === inserted
	}

	def createTables =
		{
			Setup.dropAllTables(jdbc)
			Setup.queries(this, jdbc).update("ddl")
			Setup.database match {
				case "oracle" =>
					Setup.createSeq(jdbc, "ProductSeq")
					Setup.createSeq(jdbc, "AttributeSeq")
				case _ =>
			}
		}

	case class Product(val name: String, val attributes: Set[Attribute])
	case class Attribute(val name: String, val value: String)

	object ProductEntity extends Entity[IntId, Product]("Product", classOf[Product]) {
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("ProductSeq")
			case _ => None
		}) autogenerated (_.id)
		val name = column("name") to (_.name)
		val attributes = manytomany(AttributeEntity) to (_.attributes)

		def constructor(implicit m) = new Product(name, attributes) with Persisted with IntId {
			val id: Int = ProductEntity.id // we explicitly convert this to an int because mysql serial values are always BigInteger (a bug maybe?)
		}
	}
	object AttributeEntity extends Entity[IntId, Attribute]("Attribute", classOf[Attribute]) {
		val id = key("id") sequence (Setup.database match {
			case "oracle" => Some("AttributeSeq")
			case _ => None
		}) autogenerated (_.id)
		val name = column("name") to (_.name)
		val value = column("value") to (_.value)

		def constructor(implicit m) = new Attribute(name, value) with Persisted with IntId {
			val id: Int = AttributeEntity.id // we explicitly convert this to an int because mysql serial values are always BigInteger (a bug maybe?)
		}
	}
}