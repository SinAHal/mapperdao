package com.googlecode.mapperdao
import org.specs2.mutable.SpecificationWithJUnit
import org.junit.runner.RunWith
import org.specs2.runner.JUnitRunner

/**
 * @author kostantinos.kougios
 *
 * 11 Oct 2011
 */
@RunWith(classOf[JUnitRunner])
class MemoryMapperDaoSpec extends SpecificationWithJUnit {
	case class JobPosition(var name: String)
	object JobPositionEntity extends Entity[IntId, JobPosition](classOf[JobPosition]) {
		val id = key("id") autogenerated (_.id)
		val name = column("name") to (_.name)
		def constructor(implicit m) = new JobPosition(name) with IntId with Persisted {
			val id: Int = JobPositionEntity.id
		}
	}
	case class JobPositionKey(val id: String, val name: String)
	object JobPositionEntityKey extends SimpleEntity[JobPositionKey](classOf[JobPositionKey]) {
		val id = key("id") to (_.id)
		val name = column("name") to (_.name)
		def constructor(implicit m) = new JobPositionKey(id, name) with Persisted
	}

	val typeRegistry = TypeRegistry(JobPositionEntity, JobPositionEntityKey)

	"insert with autogenerated key" in {
		val m = MemoryMapperDao(typeRegistry)

		{
			val inserted = m.insert(JobPositionEntity, JobPosition("x"))
			inserted must_== JobPosition("x")
			inserted.id must_== 1
		}
		{
			val inserted = m.insert(JobPositionEntity, JobPosition("y"))
			inserted must_== JobPosition("y")
			inserted.id must_== 2
		}
	}

	"insert with key" in {
		val m = MemoryMapperDao(typeRegistry)

		{
			val inserted = m.insert(JobPositionEntityKey, JobPositionKey("key1", "x"))
			inserted must_== JobPositionKey("key1", "x")
		}
		{
			val inserted = m.insert(JobPositionEntityKey, JobPositionKey("key2", "y"))
			inserted must_== JobPositionKey("key2", "y")
		}
	}

	"select with autogenerated key" in {
		val m = MemoryMapperDao(typeRegistry)

		{
			val inserted = m.insert(JobPositionEntity, JobPosition("x"))
			m.select(JobPositionEntity, inserted.id).get must_== JobPosition("x")
		}
		{
			val inserted = m.insert(JobPositionEntity, JobPosition("y"))
			m.select(JobPositionEntity, inserted.id).get must_== JobPosition("y")
		}
	}

	"select with key" in {
		val m = MemoryMapperDao(typeRegistry)

		{
			val inserted = m.insert(JobPositionEntityKey, JobPositionKey("key1", "x"))
			m.select(JobPositionEntityKey, "key1").get must_== JobPositionKey("key1", "x")
		}
		{
			val inserted = m.insert(JobPositionEntityKey, JobPositionKey("key2", "y"))
			m.select(JobPositionEntityKey, "key2").get must_== JobPositionKey("key2", "y")
		}
	}

	"update mutable" in {
		val m = MemoryMapperDao(typeRegistry)

		val inserted = m.insert(JobPositionEntity, JobPosition("x"))
		inserted.name = "yy"
		val updated = m.update(JobPositionEntity, inserted)
		updated must_== JobPosition("yy")
		m.select(JobPositionEntity, inserted.id).get must_== updated
	}

	"update immutable" in {
		val m = MemoryMapperDao(typeRegistry)

		val inserted = m.insert(JobPositionEntity, JobPosition("x"))
		val updated = m.update(JobPositionEntity, inserted, JobPosition("yy"))
		updated must_== JobPosition("yy")
		m.select(JobPositionEntity, inserted.id).get must_== updated
	}

	"remove" in {
		val m = MemoryMapperDao(typeRegistry)

		val inserted = m.insert(JobPositionEntity, JobPosition("x"))
		m.delete(JobPositionEntity, inserted)
		m.select(JobPositionEntity, inserted.id) must beNone
	}
}