package com.googlecode.mapperdao.jdbc
import org.specs2.mutable.SpecificationWithJUnit
import org.specs2.specification.BeforeExample
import java.util.Calendar
import org.scala_tools.time.Imports._
/**
 * @author kostantinos.kougios
 *
 * 12 Jul 2011
 */
class JdbcSpec extends SpecificationWithJUnit {
	private val jdbc = Setup.setupJdbc
	"sequences" in {
		Setup.database match {
			case "postgresql" =>
				Setup.dropAllTables(jdbc)
				Setup.createMySeq(jdbc)
				jdbc.update("""
					create table test_insert (
						id int not null default nextval('myseq'),
						name varchar(100) not null,
						primary key (id)
					)""")
				jdbc.updateGetAutoGenerated("insert into test_insert(name) values('kostas')", Array("id")).intKey("id") must_== 1
				jdbc.updateGetAutoGenerated("insert into test_insert(name) values('kougios')", Array("id")).intKey("id") must_== 2
				success
			case "oracle" =>
				Setup.dropAllTables(jdbc)
				Setup.createMySeq(jdbc)
				jdbc.update("""
					create table test_insert (
						id number(10) not null,
						name varchar(100) not null,
						primary key (id)
					)
					""")
				jdbc.update("""
					create or replace trigger ti_autonumber
					before insert on test_insert for each row
					begin
						select myseq.nextval into :new.id from dual;
					end;
				""")

				val u1 = jdbc.updateGetAutoGenerated("insert into test_insert(name) values('kostas')", Array("id"))
				u1.intKey("ID") must_== 1
				jdbc.updateGetAutoGenerated("insert into test_insert(name) values('kougios')", Array("id")).intKey("ID") must_== 2
				success
			case "mysql" | "derby" => success // doesn't support sequences
		}
	}

	"test update with generated keys" in {
		createTables
		val now = Setup.now
		val (f, idColumn) = Setup.database match {
			case "mysql" => ((u: UpdateResultWithGeneratedKeys) => u.longKey("GENERATED_KEY").toInt, "doesn't-matter")
			case "oracle" => ((u: UpdateResultWithGeneratedKeys) => u.intKey("ID"), "ID")
			case "derby" => ((u: UpdateResultWithGeneratedKeys) => u.intKey("1"), "id")
			case _ => ((u: UpdateResultWithGeneratedKeys) => u.intKey("id"), "id")
		}
		f(jdbc.updateGetAutoGenerated("insert into test_generatedkeys(name,dt) values(?,?)", Array(idColumn), "kostas", now)) must_== 1
		f(jdbc.updateGetAutoGenerated("insert into test_generatedkeys(name,dt) values(?,?)", Array(idColumn), "kougios", now)) must_== 2
		val dt3 = (now + 1 second).dateTime.withMillisOfSecond(0)
		f(jdbc.updateGetAutoGenerated("insert into test_generatedkeys(name,dt) values(?,?)", Array(idColumn), "scala", dt3)) must_== 3
		jdbc.updateGetAutoGenerated("insert into test_generatedkeys(name,dt) values(?,?)", Array(idColumn), "java", (now + 2 second).dateTime).rowsAffected must_== 1
		jdbc.queryForMap("select name from test_generatedkeys where id=1").get.string("name") must_== "kostas"
		jdbc.queryForMap("select dt from test_generatedkeys where id=3").get.datetime("dt") must_== dt3
	}

	"test update method with varargs" in {
		createTables
		val now = Setup.now
		jdbc.update("""
			insert into test_insert(id,name,dt)
			values(?,?,?)
		""", 5, "kostas", now).rowsAffected must_== 1

		// verify
		val m = jdbc.queryForList("select * from test_insert")(0)
		m.size must_== 3
		val id = m.int("id")
		id must_== 5
		m("name") must_== "kostas"
		m("dt") must_== now
	}

	"test update method with List" in {
		createTables
		jdbc.update("""
			insert into test_insert(id,name,dt)
			values(?,?,?)
		""", List(5, "kostas", Calendar.getInstance())).rowsAffected must_== 1

		// verify
		val m = jdbc.queryForList("select * from test_insert")(0)
		m.size must_== 3
		m.int("id") must_== 5
		m("name") must_== "kostas"
	}

	"test select method with vararg args" in {
		createTables
		jdbc.update("""
			insert into test_insert(id,name,dt)
			values(?,?,?)
		""", List(5, "kostas", Calendar.getInstance())).rowsAffected must_== 1

		// verify
		val m = jdbc.queryForList("select * from test_insert where id=? and name=?", 5, "kostas")(0)
		m.size must_== 3
		m.int("id") must_== 5
		m("name") must_== "kostas"
	}

	"test queryForInt varargs" in {
		createTables
		jdbc.update("insert into test_insert(id,name) values(?,?)", 5, "kostas")
		jdbc.queryForInt("select id from test_insert where name=?", "kostas") must_== 5
	}

	"test queryForInt List" in {
		createTables
		jdbc.update("insert into test_insert(id,name) values(?,?)", 5, "kostas")
		jdbc.queryForInt("select id from test_insert where name=?", List("kostas")) must_== 5
	}

	"test queryForLong varargs" in {
		createTables
		jdbc.update("insert into test_insert(id,name) values(?,?)", 5, "kostas")
		jdbc.queryForLong("select id from test_insert where name=?", "kostas") must_== 5
	}

	"test queryForLong List" in {
		createTables
		jdbc.update("insert into test_insert(id,name) values(?,?)", 5, "kostas")
		jdbc.queryForLong("select id from test_insert where name=?", List("kostas")) must_== 5
	}

	def createTables = {
		Setup.dropAllTables(jdbc)
		Setup.database match {
			case "postgresql" =>
				jdbc.update("""
			create table test_insert (
				id int not null,
				name varchar(100) not null,
				dt timestamp with time zone,
				primary key (id)
			)
		""")

				jdbc.update("""
			CREATE TABLE test_generatedkeys
			(
				id serial NOT NULL,
				name character varying,
				dt timestamp with time zone,
				primary key (id)
			)
		""")
			case "oracle" =>
				Setup.createMySeq(jdbc)
				jdbc.update("""
			create table test_insert (
				id integer not null,
				name varchar(100) not null,
				dt timestamp,
				primary key (id)
			)
		""")

				jdbc.update("""
			CREATE TABLE test_generatedkeys
			(
				id number NOT NULL,
				name varchar(100),
				dt timestamp,
				primary key (id)
			)
		""")
				jdbc.update("""
					create or replace trigger tg_autonumber
					before insert on test_generatedkeys for each row
					begin
						select myseq.nextval into :new.id from dual;
					end;
				""")

			case "mysql" =>
				jdbc.update("""
			create table test_insert (
				id int not null,
				name varchar(100) not null,
				dt datetime,
				primary key (id)
			)
		""")

				jdbc.update("""
			CREATE TABLE test_generatedkeys (
				id serial NOT NULL,
				name varchar(100),
				dt datetime,
				primary key (id)
			)
		""")
			case "derby" =>
				jdbc.update("""
			create table test_insert (
				id int not null,
				name varchar(100) not null,
				dt timestamp,
				primary key (id)
			)
		""")

				jdbc.update("""
			CREATE TABLE test_generatedkeys (
				id int NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
				name varchar(100),
				dt timestamp,
				primary key (id)
			)
		""")
		}
	}
}