package com.googlecode.mapperdao.drivers

import com.googlecode.mapperdao.jdbc.Jdbc
import com.googlecode.mapperdao.jdbc.UpdateResultWithGeneratedKeys
import com.googlecode.mapperdao.ColumnBase
import com.googlecode.mapperdao.TypeRegistry
import com.googlecode.mapperdao.PK
import com.googlecode.mapperdao.AutoGenerated
import com.googlecode.mapperdao.QueryConfig
import com.googlecode.mapperdao.Query

/**
 * @author kostantinos.kougios
 *
 * 23 Sep 2011
 */
class Oracle(override val jdbc: Jdbc, override val typeRegistry: TypeRegistry) extends Driver {
	private val invalidColumnNames = Set("select", "where", "group", "start")
	private val invalidTableNames = Set("end", "select", "where", "group", "user", "User")

	override def escapeColumnNames(name: String) = if (invalidColumnNames.contains(name)) '"' + name + '"'; else name
	override def escapeTableNames(name: String): String = if (invalidTableNames.contains(name)) '"' + name + '"'; else name

	override protected[mapperdao] def getAutoGenerated(ur: UpdateResultWithGeneratedKeys, column: ColumnBase): Any = ur.keys.get(column.columnName.toUpperCase).get

	override protected def sequenceSelectNextSql(sequenceColumn: ColumnBase): String = sequenceColumn match {
		case PK(ag: AutoGenerated) => "%s.nextval".format(ag.sequence.get)
	}

	override def beforeStartOfQuery[PC, T](queryConfig: QueryConfig, qe: Query.QueryEntity[PC, T], columns: List[ColumnBase], sql: StringBuilder): Unit =
		if (queryConfig.offset.isDefined || queryConfig.limit.isDefined) {
			sql append "select * from (\n"
			sql append "select " append commaSeparatedListOfSimpleTypeColumns(",", columns) append ",rownum as rn$ from ("
		}

	override def endOfQuery[PC, T](queryConfig: QueryConfig, qe: Query.QueryEntity[PC, T], sql: StringBuilder): Unit =
		if (queryConfig.offset.isDefined || queryConfig.limit.isDefined) {
			val offset = queryConfig.offset.getOrElse(0l)
			sql append "\n) where rownum<=" append (if (queryConfig.limit.isDefined) queryConfig.limit.get + offset else Long.MaxValue)
			sql append "\n) where rn$>" append offset
		}

	override def toString = "Oracle"
}